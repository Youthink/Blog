<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡方运的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hufangyun.com/"/>
  <updated>2018-06-18T23:33:14.000Z</updated>
  <id>https://hufangyun.com/</id>
  
  <author>
    <name>小猿大圣</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ARTS一年</title>
    <link href="https://hufangyun.com/2018/arts/"/>
    <id>https://hufangyun.com/2018/arts/</id>
    <published>2018-06-18T23:33:14.000Z</published>
    <updated>2018-06-18T23:33:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>开篇文章，记录一下我每周的 <code>ARTS</code></p><h2 id="ARTS"><a href="#ARTS" class="headerlink" title="ARTS"></a>ARTS</h2><p><strong>Algorithm</strong>: 每周至少做一个算法题</p><p><strong>Review</strong>: 阅读并点评至少一篇英文技术文章</p><p><strong>Tip</strong>: 学习至少一个技术技巧</p><p><strong>Share</strong>: 分享一篇有观点和思考的技术文章</p><h2 id="第25周-2018-06-18-06-24"><a href="#第25周-2018-06-18-06-24" class="headerlink" title="第25周 2018/06/18-06/24"></a>第25周 2018/06/18-06/24</h2><ul><li>[x] A: leetcode 第一道题 </li><li>[ ] R: </li><li>[ ] T:</li><li>[ ] S: </li></ul><h4 id="算法题收获："><a href="#算法题收获：" class="headerlink" title="算法题收获："></a>算法题收获：</h4><p>相比两次的 <code>for</code> 循环遍历，哈希表能够更有效的检查数组中是否存在目标元素。</p><p>保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。</p><h3 id="本周的技术计划"><a href="#本周的技术计划" class="headerlink" title="本周的技术计划"></a>本周的技术计划</h3><p>✅ 1、看完《算法图解》第一章<br>2、深入 line-height 这个点<br>3、完善 webpack 作业，并提交 m 站的一个点<br>4、阅读深入浅出 react 和 redux 技术栈 前四章<br>5、完成小习惯的基本功能（不包含用户检测）</p><p>####《算法图解》的收获<br>1、使用两种方法尝试写了一个二分查找<br>2、理解二分查找的需要的步数是 ${log_2 n}$<br>3、<code>大O表示法</code>：表示算法的速度有多快。</p><blockquote><p><code>大O表示法</code>指的并非以秒为单位的速度，它指出了算法运行时间的增速和最糟情况下的运行时间</p></blockquote><p>4、一些常见的<code>大O</code>运行时间 </p><blockquote><p>下面按从快到慢的顺序列出了你经常会遇到的5种<code>大O</code>运行时间</p></blockquote><ul><li>O(log n)，也叫对数时间，这样的算法包括二分查找。</li><li>O(n)，也叫线性时间，这样的算法包括简单查找。</li><li>O(n * log n)，这样的算法包括快速排序——一种速度较快的排序算法。 </li><li>O(n2)，这样的算法包括选择排序——一种速度较慢的排序算法。</li><li>O(n!)，这样的算法包括旅行商问题的解决方案——一种非常慢的算法。</li></ul><p><img src="/media/15294572109196.jpg" alt=""></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>算法的速度指的并非时间，而是操作数的增速。</li><li>算法运行时间并不以秒为单位。</li><li>谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。</li><li>算法运行时间是从其增速的角度度量的。 </li><li>算法的运行时间用大O表示法表示。</li><li><code>O(log n)</code> 比 <code>O(n)</code> 快，当需要搜索的元素越多时，前者比后者快得越多。</li><li>二分查找的速度比简单查找快得多。</li></ul><h2 id="想学"><a href="#想学" class="headerlink" title="想学"></a>想学</h2><blockquote><p>好多要学的，感觉都排在一周，我也做不完，会打击积极性 😭 安排在后面吧。</p></blockquote><p>1、看完你不知道的Javascript 第一章</p><p>2、flex 布局。翻一下规范，好好的掌握一下</p><p>3、阅读 m 站一个基础库的源码 暂定 ajax</p><p>4、JavaScript Math 方法总结</p><p>5、错误上报的实现原理</p><p>6、JavaScript 的类</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开篇文章，记录一下我每周的 &lt;code&gt;ARTS&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;ARTS&quot;&gt;&lt;a href=&quot;#ARTS&quot; class=&quot;headerlink&quot; title=&quot;ARTS&quot;&gt;&lt;/a&gt;ARTS&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Algorithm&lt;/stro
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>提升效率的小工具分享</title>
    <link href="https://hufangyun.com/2018/efficient-small-tools/"/>
    <id>https://hufangyun.com/2018/efficient-small-tools/</id>
    <published>2018-06-18T23:17:41.000Z</published>
    <updated>2018-06-18T23:17:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>哈哈 😝 ，碰到好的工具总是忍不住要和大家分享一下</p></blockquote><p> git-open</p><blockquote><p><code>zsh</code> 插件。在终端快速打开 <code>git</code> 项目主页。 详情请看<a href="https://hufangyun.com/2017/zsh-plugin/">这篇博文</a></p></blockquote><p> gitlab</p><blockquote><p>Alfred workflow gitlab 插件。快速打开 项目地址。<a href="https://github.com/lukewaite/alfred-gitlab" target="_blank" rel="noopener">下载地址</a></p></blockquote><p> chrome 的 device</p><blockquote><p>chrome 设置 <code>UA</code> 模拟设备。 可以设置在微信环境内、iOS app 内。</p></blockquote><p> dash</p><blockquote><p>代码片段功能</p></blockquote><p> trash</p><blockquote><p>删除文件到系统的垃圾桶。防止 <code>rm</code> 错删文件，无法找回 <a href="https://github.com/sindresorhus/trash" target="_blank" rel="noopener">trash 官网</a></p></blockquote><p> onetab</p><blockquote><p>chrome 插件 暂存打开的标签页</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;哈哈 😝 ，碰到好的工具总是忍不住要和大家分享一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; git-open&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;zsh&lt;/code&gt; 插件。在终端快速打开 &lt;code&gt;git&lt;/code&gt; 项
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>几个不错的 App 设计网站</title>
    <link href="https://hufangyun.com/2018/ui-design-get/"/>
    <id>https://hufangyun.com/2018/ui-design-get/</id>
    <published>2018-06-14T11:13:39.000Z</published>
    <updated>2018-06-14T11:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://hufangyun.com">小猿大圣</a>的 UI 学习自留地</p></blockquote><h2 id="sketchappsources"><a href="#sketchappsources" class="headerlink" title="sketchappsources"></a>sketchappsources</h2><p><a href="https://www.sketchappsources.com/" target="_blank" rel="noopener">https://www.sketchappsources.com/</a></p><p><img src="/media/15289473088372.jpg" alt=""></p><h2 id="dribbble"><a href="#dribbble" class="headerlink" title="dribbble"></a>dribbble</h2><p><a href="https://dribbble.com/" target="_blank" rel="noopener">https://dribbble.com/</a></p><p><img src="/media/15289473603818.jpg" alt=""></p><h2 id="sketchrepo"><a href="#sketchrepo" class="headerlink" title="sketchrepo"></a>sketchrepo</h2><p><a href="https://sketchrepo.com/" target="_blank" rel="noopener">https://sketchrepo.com/</a></p><p><img src="/media/15289475696821.jpg" alt=""></p><h2 id="uipixels"><a href="#uipixels" class="headerlink" title="uipixels"></a>uipixels</h2><p><a href="http://www.uipixels.com/" target="_blank" rel="noopener">http://www.uipixels.com/</a></p><p><img src="/media/15289475478955.jpg" alt=""></p><h2 id="UI-中国"><a href="#UI-中国" class="headerlink" title="UI 中国"></a>UI 中国</h2><p><a href="http://www.ui.cn/" target="_blank" rel="noopener">http://www.ui.cn/</a></p><h2 id="collectui"><a href="#collectui" class="headerlink" title="collectui"></a>collectui</h2><p><a href="http://collectui.com/" target="_blank" rel="noopener">http://collectui.com/</a></p><p><img src="/media/15289480476334.jpg" alt=""></p><h2 id="uplabs"><a href="#uplabs" class="headerlink" title="uplabs"></a>uplabs</h2><p><a href="https://www.uplabs.com/" target="_blank" rel="noopener">https://www.uplabs.com/</a></p><p><img src="/media/15289481019068.jpg" alt=""></p><h2 id="sketchactive"><a href="#sketchactive" class="headerlink" title="sketchactive"></a>sketchactive</h2><blockquote><p>图标</p></blockquote><p><a href="http://aegeank.com/sketchactive/" target="_blank" rel="noopener">http://aegeank.com/sketchactive/</a></p><p><img src="/media/15289474299421.jpg" alt=""></p><h2 id="创造狮"><a href="#创造狮" class="headerlink" title="创造狮"></a>创造狮</h2><blockquote><p>导航</p></blockquote><p><a href="http://chuangzaoshi.com/" target="_blank" rel="noopener">http://chuangzaoshi.com/</a></p><p><img src="/media/15289478996799.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hufangyun.com&quot;&gt;小猿大圣&lt;/a&gt;的 UI 学习自留地&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;sketchappsources&quot;&gt;&lt;a href=&quot;#sketchappsources&quot; c
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库设计入门指南与学习笔记</title>
    <link href="https://hufangyun.com/2018/sql-design/"/>
    <id>https://hufangyun.com/2018/sql-design/</id>
    <published>2018-06-13T16:55:00.000Z</published>
    <updated>2018-06-13T16:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要记载我学习数据库设计过程中使用的学习资料和对相关知识的理解</p></blockquote><h2 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h2><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="https://www.imooc.com/video/1903" target="_blank" rel="noopener">慕课网的免费视频</a> 数据库设计那些事</p><blockquote><p><a href="https://coolshell.cn/haoel" target="_blank" rel="noopener">陈皓</a>在『左耳听风』专栏之程序员练级攻略（2018）里推荐的数据库入门资料</p></blockquote><h3 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h3><h4 id="什么是数据库设计？"><a href="#什么是数据库设计？" class="headerlink" title="什么是数据库设计？"></a>什么是数据库设计？</h4><p>根据<strong>业务需求</strong>，建立可以进行<strong>高效访问</strong>和<strong>高效存储</strong>的数据存储模型。（我自己的理解，不是定义哈 😂）</p><p>1、业务需求</p><p>2、高效的访问</p><p>3、高效的存储</p><h4 id="好的数据库设计是怎样的"><a href="#好的数据库设计是怎样的" class="headerlink" title="好的数据库设计是怎样的"></a>好的数据库设计是怎样的</h4><p>1、减少数据冗余 （相同的数据在多个地方存在）</p><p>2、避免数据维护异常（插入、更新、删除异常）</p><p>3、节约存储空间（省钱 💰）</p><p>4、高效的访问</p><h4 id="数据库设计的过程"><a href="#数据库设计的过程" class="headerlink" title="数据库设计的过程"></a>数据库设计的过程</h4><p>1、功能模块划分</p><p>2、分析各个模块的数据包括的那些属性、那些是可选的唯一标识</p><p>3、分析实体间的关系 1对1 1对多 多对多</p><p>4、使用ER图展示2、3步</p><p>5、分析数据的生命周期。永久存储（分表、分库）还是归档存储还是不归档存储（定期清理）</p><h4 id="使用ER图展示数据关系"><a href="#使用ER图展示数据关系" class="headerlink" title="使用ER图展示数据关系"></a>使用ER图展示数据关系</h4><p><img src="/media/15293168268240.jpg" alt=""></p><p><img src="/media/15293168822924.jpg" alt=""></p><h4 id="设计范式"><a href="#设计范式" class="headerlink" title="设计范式"></a>设计范式</h4><p>第一范式：字段是单一属性，不可再分，二维表。</p><p><img src="/media/15293255381312.jpg" alt=""></p><p>第二范式：供应商名称和商品名称放在一起，组合关键字，不要出现。</p><p><img src="/media/15293255732513.jpg" alt=""></p><p>第三范式：商品名称 -&gt; 分类名 -&gt; 分类描述 共存。</p><p><img src="/media/15293257830389.jpg" alt=""></p><p><img src="/media/15293256812047.jpg" alt=""></p><p>BC范式</p><p><img src="/media/15293258992402.jpg" alt=""></p><h4 id="字段类型的选择"><a href="#字段类型的选择" class="headerlink" title="字段类型的选择"></a>字段类型的选择</h4><p>1、当一个字段有多个类型可以选择的时候，优先选择数字类型、其次是日期和二进制，最后是字符类型。</p><p>2、如果列中要存储的数据长度差不多是一致的或者最大数据长度小于<code>50byte</code>优先使用 <code>char</code> 类型</p><p><img src="/media/15293267820612.jpg" alt=""></p><p>3、主键的字段类型所占的空间要尽可能的小。</p><p>4、避免使用外键约束，会增加维护成本，但是在相关联的列上一定要建立索引</p><h4 id="维护和优化"><a href="#维护和优化" class="headerlink" title="维护和优化"></a>维护和优化</h4><p><img src="/media/15293275139331.jpg" alt=""></p><p><img src="/media/15293276627730.jpg" alt=""></p><p><img src="/media/15293278075195.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要记载我学习数据库设计过程中使用的学习资料和对相关知识的理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;入门篇&quot;&gt;&lt;a href=&quot;#入门篇&quot; class=&quot;headerlink&quot; title=&quot;入门篇&quot;&gt;&lt;/a&gt;入门篇&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>SMART目标成长法</title>
    <link href="https://hufangyun.com/2018/smart-goal/"/>
    <id>https://hufangyun.com/2018/smart-goal/</id>
    <published>2018-05-13T04:26:49.000Z</published>
    <updated>2018-05-13T04:26:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言-🔗"><a href="#前言-🔗" class="headerlink" title="前言 🔗"></a>前言 🔗</h2><blockquote><p>目标是很美好的事情，你可能会有许多目标：减肥🏃‍♂️、找到一个更好的工作👔、搬进一个更大的房子🏡（或者更小的房子）、写本小说、学习演奏电吉他🎸、编写一个超级 <code>Rails</code> 应用程序或者完全掌握 <code>Erlang</code>。</p><p>但是很多目标都是一个模式——崇高的、泛泛的“我希望在某某方面更好”。减肥就是一个最好的例子🌰。</p><p>大多数人想要更苗条🧜‍♀️（特别是我们这些长时间坐在电脑前的人）。<br>但“我想要苗条”并不是一个非常明确的目标（虽然可能是一个很好的愿景——长期、理想的状态）。</p><p>你体重需要减多少斤？你仰卧举重准备练多少公斤的？何时完成？你准备控制热量还是增加锻炼？⚽️</p><p>类似地，说你想“学习 <code>Erlang</code> 是不错，但是这到底是什么意思？想要学到什么程度？想用它来做什么？如何开始？<br>为了帮助你专注于自己的目标，能够更好地实现它，请允许我推荐一种风靡一时的来自于咨询领域的诀窍：使用 <code>SMART</code> 方法实现你的目标。🥇</p></blockquote><p><img src="/media/20160621110804644.png" alt="20160621110804644"></p><blockquote><p>图片取自 Google Image</p></blockquote><h2 id="什么是-SMART-💪"><a href="#什么是-SMART-💪" class="headerlink" title="什么是 SMART 💪"></a>什么是 <code>SMART</code> 💪</h2><p><strong><code>SMART</code> 代表具体的、可度量的、可实现的、相关的和时间可控的（Specific, Measurable, Achievable, Relevant, and Time-boxed）</strong></p><h3 id="具体的-✅"><a href="#具体的-✅" class="headerlink" title="具体的 ✅"></a>具体的 ✅</h3><p>首先，一个目标任务应该是具体的。也就是说，只说 “我想学习Erlang” 是不够的。应该把事情具体化，例如“我想要用Erlang编写一个可以动态生成内容的Web服务器”。</p><h3 id="可度量的-⏰"><a href="#可度量的-⏰" class="headerlink" title="可度量的 ⏰"></a>可度量的 ⏰</h3><p>如何知道你何时完成？这一直是我最喜欢问的一个问题。为了努力实现目标任务，不管采用什么方法，你必须能够度量它。</p><p>但是一定要采取稳扎稳打、步步为营的过程。你不能期望一周之内减掉五十英镑或者利用一个周末就学会一门全新的编程语言和它的全部函数库。度量你的目标任务，但是要采取增量进步的方法。👣</p><p>你不必看清你去往何处。不必看清你的目的地和沿途的一切。你只需要看清面前的一两米即可。 </p><h3 id="可实现的👍"><a href="#可实现的👍" class="headerlink" title="可实现的👍"></a>可实现的👍</h3><p>我想要攀登K2峰，想在中东建立永久和平。这一切不会发生。😂</p><p>至少，对我来说是这样。这些都是很好的目标，但是不现实。对我来说在当前的现实情况下无法实现。🤪</p><p>因此，先确定目标是否合理。你也许可以在下周用新语言编写一段 “Hello,World!” 或者一个简单应用，但是你可能无法编写一个完整的Web应用框架和一个带有神经网络优化算法的用户界面构造器。</p><p>从你现在所处的情况着眼，让每一个目标都可实现。🚀</p><h3 id="相关的🔗"><a href="#相关的🔗" class="headerlink" title="相关的🔗"></a>相关的🔗</h3><p>这个目标真的与你有关吗——对你重要吗？🏆你对此有热情吗？是在你控制之下的事情吗？<br>如果不是，这个目标就是不相关的。<br>目标需要相关，需要在你掌控之中🎉。</p><h3 id="时间可控的🕰"><a href="#时间可控的🕰" class="headerlink" title="时间可控的🕰"></a>时间可控的🕰</h3><p>这意味着你需要设定一个最后期限⏱。没有期限，目标会逐步衰退，永远被每天更紧急的事情所排挤。这样它永远都不会实现🥊。</p><p><strong>再强调一遍，稳扎稳打。采取循序渐进、比较细小的里程碑。当实现它们后，你会更有动力去实现下一个里程碑。</strong></p><h2 id="建立SMART任务实现你的目标。⌛️"><a href="#建立SMART任务实现你的目标。⌛️" class="headerlink" title="建立SMART任务实现你的目标。⌛️"></a>建立SMART任务实现你的目标。⌛️</h2><p>这种方法帮助你从自己的角度😀（“我”）、从更积极的角度（“我要”）😘来明确目标，要么用一般现在时，要么给出明确的时间表述（“我会💪在xx时间之前完成zyzzy”）。</p><h2 id="更大背景下的目标🚀"><a href="#更大背景下的目标🚀" class="headerlink" title="更大背景下的目标🚀"></a>更大背景下的目标🚀</h2><p>设定目标是第一步。</p><p>下一步行动是创建小任务以帮助你每天或每隔一段时间都能达到某种程度。你创建的小任务越多，你就越容易看清自己与目标的距离。</p><blockquote><p>本文大部分内容由小猿大圣摘录自 《程序员的思维修炼:开发认知潜能的九堂课 (图灵程序设计丛书)》</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言-🔗&quot;&gt;&lt;a href=&quot;#前言-🔗&quot; class=&quot;headerlink&quot; title=&quot;前言 🔗&quot;&gt;&lt;/a&gt;前言 🔗&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;目标是很美好的事情，你可能会有许多目标：减肥🏃‍♂️、找到一个更好的工作👔、搬进一个更
      
    
    </summary>
    
      <category term="读书" scheme="https://hufangyun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>新手到专家的五个阶段</title>
    <link href="https://hufangyun.com/2018/novice-to-expert-five-stage/"/>
    <id>https://hufangyun.com/2018/novice-to-expert-five-stage/</id>
    <published>2018-05-06T10:48:06.000Z</published>
    <updated>2018-05-06T10:48:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《程序员的思维修炼:开发认知潜能的九堂课 (图灵程序设计丛书)》读书笔记 </p></blockquote><h2 id="德雷福斯模型的5个阶段"><a href="#德雷福斯模型的5个阶段" class="headerlink" title="德雷福斯模型的5个阶段"></a>德雷福斯模型的5个阶段</h2><p><img src="/media/15256037912881.png" alt=""></p><h2 id="有效的使用德雷福斯模型"><a href="#有效的使用德雷福斯模型" class="headerlink" title="有效的使用德雷福斯模型"></a>有效的使用德雷福斯模型</h2><ul><li>需要一个明确定义的任务。 ⏱</li><li>任务需要有适当难度——有挑战性但可行。⏰</li><li>任务环境可以提供大量反馈，以便于你采取行动。🛠</li><li>提供重复犯错和纠正错误的机会。稳步做这种实践十年，你就会达到目标。💯</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;《程序员的思维修炼:开发认知潜能的九堂课 (图灵程序设计丛书)》读书笔记 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;德雷福斯模型的5个阶段&quot;&gt;&lt;a href=&quot;#德雷福斯模型的5个阶段&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="读书" scheme="https://hufangyun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>关于转载</title>
    <link href="https://hufangyun.com/2018/copyright-reprinted/"/>
    <id>https://hufangyun.com/2018/copyright-reprinted/</id>
    <published>2018-04-26T08:52:30.000Z</published>
    <updated>2018-04-27T08:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，发现自己写的博文，被别人转载了。有商业性质的网站、有个人博主，也有各种爬虫自动采集收录。</p><p>比如这篇 <a href="https://hufangyun.com/2017/short-url/">短网址(short URL)系统的原理及其实现</a>, 我发现这篇文章在谷歌和百度搜索的时候，前5、6页搜索结果都找不到我自己的原文地址😭，只有必应第一条搜索结果是我自己的博客 😂</p><h2 id="我不希望文章被复制粘贴转载-❌"><a href="#我不希望文章被复制粘贴转载-❌" class="headerlink" title="我不希望文章被复制粘贴转载 ❌"></a>我不希望文章被复制粘贴转载 ❌</h2><ul><li><strong>我的博客是经常更新的。</strong> 🚀 我的博文是按照更新时间排序的，在编程技术领域以及社会这个大家庭中，我还很年轻，写的东西难免会有错误，或者认知上的不成熟，一旦我发现有错误或者内容补充，我会不定期的更新文章内容。但是复制粘贴转载的文章，并不会随着我更新而更新，错误的内容会一直保留，给之后的阅读者留下隐患。</li><li><strong>我不能更好的收到反馈。</strong> 我发现很多转载的文章下面，有对我文章内容的疑问和勘误，转载文章的人，并不会去解释这些疑问，而我作为文章的原创作者，也收不到别人指正的错误。对文章的阅读者和作者的我，都没有很好的反馈。</li><li><strong>阅读效果不佳。</strong> 最让我受不了的是，我在写作的时候使用了 <code>Markdown</code> 的语法画的流程图很多网站不支持显示，显示的全是代码。还有我用的表情 🐻，他们也显示不出来。。。。</li></ul><h2 id="我希望的转载方式-✅"><a href="#我希望的转载方式-✅" class="headerlink" title="我希望的转载方式 ✅"></a>我希望的转载方式 ✅</h2><p><strong>分享链接转载，指向我的博文。</strong> 我觉的这是最好的转载方式，互赢。</p><p><strong>如果，</strong> 非要复制粘贴的转载，请联系我 <strong>获得授权</strong>，未经许可禁止转载。</p><p>我会在文章的开头注明授权给了谁。我文章更新的时候，也通知转载文章的地方更新。</p><p>邮箱地址：<code>hufy78#gmail.com</code> <code>hufy3651#foxmail.com</code> <code>#</code> 换成 <code>@</code></p><h2 id="关于原创自己总结的方法"><a href="#关于原创自己总结的方法" class="headerlink" title="关于原创自己总结的方法"></a>关于原创自己总结的方法</h2><p>1、有自己的文章风格。这个好像很难。。。</p><p>2、有代码实例，指向自己的网站、Github</p><p>3、图片截图包含自己的博客域名目录等</p><p>4、截图带上自己的水印</p><p>5、每篇文章后面带上转载声明</p><p>6、文章内容示例含有自己的标识</p><h2 id="使用别人的原创"><a href="#使用别人的原创" class="headerlink" title="使用别人的原创"></a>使用别人的原创</h2><p>换位思考，以后我使用别人的图片和摘选的内容时，我会带上来源地址和作者署名，尊重原创。💪</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近，发现自己写的博文，被别人转载了。有商业性质的网站、有个人博主，也有各种爬虫自动采集收录。&lt;/p&gt;
&lt;p&gt;比如这篇 &lt;a href=&quot;https://hufangyun.com/2017/short-url/&quot;&gt;短网址(short URL)系统的原理及其实现&lt;/a&gt;, 
      
    
    </summary>
    
      <category term="随笔" scheme="https://hufangyun.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>loading 等待不再无聊</title>
    <link href="https://hufangyun.com/2018/loading/"/>
    <id>https://hufangyun.com/2018/loading/</id>
    <published>2018-03-27T06:20:01.000Z</published>
    <updated>2018-03-27T06:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/Spinner-1s-200px.gif" alt="Spinner-1s-200px"></p><blockquote><p>很多应用在加载的时候，因为数据还没有返回，会给用户呈现一个加载的动效作为反馈，提示用户数据正在加载。但是如果页面加载的时间太长，可能就会导致用户流失。</p><p>其实等待加载的这个小细节里，也有很多的创意，让等待不在无聊。</p></blockquote><p>为了让用户能稍等片刻，<code>loading</code> 的设计就可以充满趣味性，这里介绍一些比较有趣的 <code>loading</code>，让等待的过程变成了一种享受。</p><h2 id="使用充满趣味性的加载动效"><a href="#使用充满趣味性的加载动效" class="headerlink" title="使用充满趣味性的加载动效"></a>使用充满趣味性的加载动效</h2><p><img src="http://image.woshipm.com/wp-files/2017/02/a4WTx4yop7z4oCVUMIUl.gif" alt=""></p><p><img src="/media/pdECLTLpVFMr4Jc8xCWb.gif" alt="pdECLTLpVFMr4Jc8xCWb"></p><p><img src="/media/161ZG138-44.gif" alt="161ZG138-44"></p><p><img src="/media/161ZJ0S-14.gif" alt="161ZJ0S-14"></p><p><img src="/media/815442-b0b53e2a86279228.gif" alt="815442-b0b53e2a86279228"></p><p><img src="/media/815442-6f23db9af75006ff.gif" alt="815442-6f23db9af75006ff"></p><p><img src="/media/giphy.gif" alt="giphy"></p><h3 id="品牌的-loading"><a href="#品牌的-loading" class="headerlink" title="品牌的 loading"></a>品牌的 loading</h3><blockquote><p>嵌入自家 logo，强化产品品牌</p></blockquote><h4 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h4><p><img src="/media/04-google-loading-motion-dots-logo.gif" alt="04-google-loading-motion-dots-logo"></p><h4 id="slack"><a href="#slack" class="headerlink" title="slack"></a>slack</h4><p><img src="/media/slack_load.gif" alt="slack_load"></p><h4 id="digg"><a href="#digg" class="headerlink" title="digg"></a>digg</h4><p><img src="/media/815442-668ae4eaf45aab9b.gif" alt="815442-668ae4eaf45aab9b"></p><blockquote><p>上面的 <code>loading</code> 用户初次见到时候可能会感到比较新颖，但是多次遇到 <code>loading</code> 后，趣味性就递减了。</p></blockquote><p>我常用的一款 app 的 <code>loading</code> 就很有意思，每次的文案不一样，而且充满趣味性。</p><p>这样的 app 即使出现 <code>loading</code>，用户不会有等待感，反而想看清楚显示的是什么，对每次的文案充满期待。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let noticeString = [</span><br><span class="line">    &quot;正在拼命加载&quot;,</span><br><span class="line">    &quot;前方发现楼主&quot;,</span><br><span class="line">    &quot;年轻人,不要着急&quot;,</span><br><span class="line">    &quot;让我飞一会儿&quot;,</span><br><span class="line">    &quot;大爷,您又来了?&quot;,</span><br><span class="line">    &quot;楼主正在抓皮卡丘，等他一会儿吧&quot;,</span><br><span class="line">    &quot;爱我，就等我一万年&quot;,</span><br><span class="line">    &quot;未满18禁止入内&quot;,</span><br><span class="line">    &quot;正在前往 花村&quot;,</span><br><span class="line">    &quot;正在前往 阿努比斯神殿&quot;,</span><br><span class="line">    &quot;正在前往 沃斯卡娅工业区&quot;,</span><br><span class="line">    &quot;正在前往 观测站：直布罗陀&quot;,</span><br><span class="line">    &quot;正在前往 好莱坞&quot;,</span><br><span class="line">    &quot;正在前往 66号公路&quot;,</span><br><span class="line">    &quot;正在前往 国王大道&quot;,</span><br><span class="line">    &quot;正在前往 伊利奥斯&quot;,</span><br><span class="line">    &quot;正在前往 漓江塔&quot;,</span><br><span class="line">    &quot;正在前往 尼泊尔&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><blockquote><p>最后，附上几个 <code>loading</code> 生成工具。</p></blockquote><h3 id="loading-io"><a href="#loading-io" class="headerlink" title="loading.io"></a>loading.io</h3><p><a href="https://loading.io/" target="_blank" rel="noopener">https://loading.io/</a></p><p>登陆后，免费下载，支持 <code>loading</code> 动效的各种格式导出。</p><p><img src="/media/15221417078807.jpg" alt=""></p><h3 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h3><p><a href="https://connoratherton.com/loaders" target="_blank" rel="noopener">https://connoratherton.com/loaders</a></p><p>纯 <code>css</code> 实现的 <code>loading</code></p><p><img src="/media/15221417417648.jpg" alt=""></p><h3 id="spin-js"><a href="#spin-js" class="headerlink" title="spin.js"></a>spin.js</h3><p><a href="http://spin.js.org/" target="_blank" rel="noopener">http://spin.js.org/</a></p><p>在线编辑各种参数</p><p><img src="/media/15221418378683.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/media/Spinner-1s-200px.gif&quot; alt=&quot;Spinner-1s-200px&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很多应用在加载的时候，因为数据还没有返回，会给用户呈现一个加载的动效作为反馈，提示用户数据正在加载。但是如果
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>我的技术成长历程</title>
    <link href="https://hufangyun.com/2018/tech-road-my/"/>
    <id>https://hufangyun.com/2018/tech-road-my/</id>
    <published>2018-02-04T04:20:45.000Z</published>
    <updated>2018-02-04T18:34:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><blockquote><p>2017年我离开校园，从实习到转正，算是正式参加工作了。我希望以后每年回顾的时候，都能感受到自己的技术成长。我也想练就一身的武艺，在IT的江湖里，仗剑天涯。</p></blockquote><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><p>2017年我学习了新语言 <code>elixir</code> (文末的扩展阅读有介绍的链接) 以及其对应的 web 框架 <code>phoenix</code> 。 <code>elixir</code> + <code>phoenix</code> 有点类似于 <code>ruby</code> on <code>rails</code> 。<code>phoenix</code> 配套的工具比较齐全，开发应用的体验很棒。上手后，感觉写 web 应用效率很高，能够快速的构建原型，验证自己的 ideas。这算是扩展自己服务端的技术栈，完善自己 web 领域的知识结构。</p><p>第二个，现在养成了，查看源码，溯本求源，刨根问底的习惯。<br>以前遇到问题时候，先 <code>Google</code> 是肯定的了，开发者必备的技能嘛。但是如果搜索的时候解决不了的问题，我也会去问答类的网站寻求帮助。但是2017年，我又 Get 了一个新的技能，查看源码。我发现很多的问题，尤其是很多前端库导致的问题，看一遍源码，不但问题解决了，而且对该库的实现也会有个大概的了解。有时候有些小伙伴也会向我请教问题，初看的话，我也不知道怎么解决。但是当我去翻看源码的时候，很多问题就迎刃而解了。这也是编程初学者快速提高实力的一个方法。</p><p>第三个，<code>markdown</code> 的书写格式。<br>自从看了 <code>markdown</code> 的一些书写规范后，我在用 <code>markdown</code> 写文档的时候格式注意多了。我觉的以后我要把这种好的习惯延续到我的代码规范里，保持一点代码洁癖。</p><p>第四个，文章的推广。<br>之前我一直在 <a href="https://segmentfault.com/u/youthink" target="_blank" rel="noopener">segmentfault</a> 上写技术博文(因为他们家的 markdown 编辑器很好用)，后来有一次我把自己的 <a href="https://hufangyun.com/2017/short-url/">短网址(short URL)系统的原理及其实现</a> 这篇分享到了掘金，一周之内我博客的流量暴增，超乎我的想象力，让我发现了新世界。文章收到好的反馈，对我来说是很积极的鼓励，让我再接再厉。</p><h3 id="晋升"><a href="#晋升" class="headerlink" title="晋升"></a>晋升</h3><p>年底一件很高兴的事情就是，老大帮我提名晋升，结果也很棒，晋升成功。职称晋升算是对我的技术成长最好的反馈。再接再厉，做好技术沉淀，挑战下一个技术等级。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="https://hufangyun.com/2017/elixir-introduction/">elixir介绍：未来的编程语言</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2017&quot;&gt;&lt;a href=&quot;#2017&quot; class=&quot;headerlink&quot; title=&quot;2017&quot;&gt;&lt;/a&gt;2017&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2017年我离开校园，从实习到转正，算是正式参加工作了。我希望以后每年回顾的时候，都能感受到自己的
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>elixir-phoenix-practice</title>
    <link href="https://hufangyun.com/2018/elixir-phoenix-practice/"/>
    <id>https://hufangyun.com/2018/elixir-phoenix-practice/</id>
    <published>2018-01-29T16:15:22.000Z</published>
    <updated>2018-01-29T16:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是我使用 <code>Elixir</code> <code>phoenix</code> 开发 web 应用中的一些总结，好记性不如烂笔头，每次应用开发中间如果间隔得时间太长，很多东西、概念记得就没那么清楚了，影响开发效率。</p></blockquote><h2 id="ecto"><a href="#ecto" class="headerlink" title="ecto"></a>ecto</h2><h2 id="功能实现与逻辑处理"><a href="#功能实现与逻辑处理" class="headerlink" title="功能实现与逻辑处理"></a>功能实现与逻辑处理</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文是我使用 &lt;code&gt;Elixir&lt;/code&gt; &lt;code&gt;phoenix&lt;/code&gt; 开发 web 应用中的一些总结，好记性不如烂笔头，每次应用开发中间如果间隔得时间太长，很多东西、概念记得就没那么清楚了，影响开发效率。&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>怎样做复盘？</title>
    <link href="https://hufangyun.com/2018/replay/"/>
    <id>https://hufangyun.com/2018/replay/</id>
    <published>2018-01-03T16:00:00.000Z</published>
    <updated>2018-01-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>“bug 写了这么多”，少不了复盘。记录一下方法论。</p><blockquote><p>一件事情做完后无论成功与否，坐下来把当时预先的想法、中间出现的问题、为什么没达成或者为什么达成目标等因素整理一遍，在下次做同样的事时，自然就能吸取上次的经验教训。这就是复盘。——柳传志</p></blockquote><h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><ol><li><p>哪些地方做得比较好？分析原因，下次坚持好的原则；</p></li><li><p>哪些地方不好？分析原因，以后怎么彻底避免类似问题？</p></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>反思与总结的四步骤</p><ul><li>回顾目标，时刻牢记最初目的，并一遍一遍地回顾和澄清；</li><li>对照最初的目标，回顾过程，评估结果；</li><li>刨根问底，分析原因；</li><li>总结规律并反思，制订下一步行动计划，包括需要实施哪些新举措，继续留用哪些举措，取消哪些举措等。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“bug 写了这么多”，少不了复盘。记录一下方法论。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一件事情做完后无论成功与否，坐下来把当时预先的想法、中间出现的问题、为什么没达成或者为什么达成目标等因素整理一遍，在下次做同样的事时，自然就能吸取上次的经验教训。这就是复盘。——柳
      
    
    </summary>
    
      <category term="读书" scheme="https://hufangyun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 edeliver 部署 Elixir 应用程序</title>
    <link href="https://hufangyun.com/2017/elixir-edeliver/"/>
    <id>https://hufangyun.com/2017/elixir-edeliver/</id>
    <published>2017-12-10T16:00:00.000Z</published>
    <updated>2018-02-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/1786864843-5a2b22b4e6cd1_articlex.png" alt="1786864843-5a2b22b4e6cd1_articlex"></p><blockquote><p>最近使用 <code>Elixir</code> 的 web 框架 <code>Phoenix</code> 开发了一个简单的应用，部署的时候踩了不少坑。做一下笔记。</p></blockquote><h2 id="引入-edeliver-依赖"><a href="#引入-edeliver-依赖" class="headerlink" title="引入 edeliver 依赖"></a>引入 edeliver 依赖</h2><p>修改 <code>mix.exs</code> 文件，引入 <a href="https://github.com/edeliver/edeliver" target="_blank" rel="noopener">edeliver</a> 依赖</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span></span>, <span class="symbol">do:</span> [</span><br><span class="line">  <span class="symbol">applications:</span> [</span><br><span class="line">    <span class="symbol">:edeliver</span></span><br><span class="line">  ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">deps</span></span> <span class="keyword">do</span></span><br><span class="line">  [</span><br><span class="line">    ...</span><br><span class="line">    &#123;<span class="symbol">:edeliver</span>, <span class="string">"~&gt; 1.4.4"</span>&#125;,</span><br><span class="line">    &#123;<span class="symbol">:exrm</span>, <span class="string">"&gt;= 0.16.0"</span>, <span class="symbol">warn_missing:</span> <span class="keyword">false</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里有两种组合 <code>edeliver</code> + <code>distillery</code> 或者 <code>edeliver</code> + <code>exrm</code>，我选用了后者。因为配置更简单一点。🐒</p><h2 id="edeliver-配置"><a href="#edeliver-配置" class="headerlink" title="edeliver 配置"></a>edeliver 配置</h2><p>在项目文件夹，创建 <code>.deliver/config</code> 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">APP=<span class="string">"your-erlang-app"</span> <span class="comment"># 应用名称</span></span><br><span class="line"></span><br><span class="line">BUILD_HOST=<span class="string">"build-system.acme.org"</span> <span class="comment"># 构建的主机地址</span></span><br><span class="line">BUILD_USER=<span class="string">"build"</span> <span class="comment"># 构建主机的登录用户名</span></span><br><span class="line"></span><br><span class="line">BUILD_AT=<span class="string">"/tmp/erlang/my-app/builds"</span> <span class="comment"># 构建主机上的构建文件夹</span></span><br><span class="line"></span><br><span class="line">STAGING_HOSTS=<span class="string">"test1.acme.org test2.acme.org"</span> <span class="comment"># 测试主机地址</span></span><br><span class="line">STAGING_USER=<span class="string">"test"</span> <span class="comment"># 测试主机的登录用户名</span></span><br><span class="line">TEST_AT=<span class="string">"/test/my-erlang-app"</span> <span class="comment"># 测试的构建文件夹</span></span><br><span class="line"></span><br><span class="line">PRODUCTION_HOSTS=<span class="string">"deploy1.acme.org deploy2.acme.org"</span> <span class="comment"># 部署主机地址</span></span><br><span class="line">PRODUCTION_USER=<span class="string">"production"</span> <span class="comment"># 部署主机的登录用户名</span></span><br><span class="line">DELIVER_TO=<span class="string">"/opt/my-erlang-app"</span> <span class="comment"># 部署的文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/prod.secret.exs 文件保存了很多的敏感信息，这个文件不能放在项目里。</span></span><br><span class="line"><span class="comment"># 我们把它放在服务器上，部署的时候自动连接过去。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">pre_erlang_get_and_update_deps</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> _prod_secret_path=<span class="string">"/home/builder/prod.secret.exs"</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$TARGET_MIX_ENV</span>"</span> = <span class="string">"prod"</span> ]; <span class="keyword">then</span></span><br><span class="line">    __sync_remote <span class="string">"</span></span><br><span class="line"><span class="string">      ln -sfn '<span class="variable">$_prod_secret_path</span>' '<span class="variable">$BUILD_AT</span>/config/prod.secret.exs'</span></span><br><span class="line"><span class="string">    "</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子 🌰 我某次的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">APP=<span class="string">"short_url"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动以 git revision 作为发布名称</span></span><br><span class="line">AUTO_VERSION=<span class="string">"revision"</span></span><br><span class="line"></span><br><span class="line">BUILD_HOST=<span class="string">"url"</span></span><br><span class="line">BUILD_USER=<span class="string">"web"</span></span><br><span class="line">BUILD_AT=<span class="string">"/tmp/edeliver/short_url/builds"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我只有正式环境，所以没有配置 STAGING 环境</span></span><br><span class="line">PRODUCTION_HOSTS=<span class="string">"url"</span></span><br><span class="line">PRODUCTION_USER=<span class="string">"web"</span></span><br><span class="line"></span><br><span class="line">DELIVER_TO=<span class="string">"/home/web/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换用了国内的源，加快依赖安装速度</span></span><br><span class="line">HEX_MIRROR_URL=<span class="string">"https://hexpm.upyun.com"</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">pre_erlang_get_and_update_deps</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> _prod_secret_path=<span class="string">"/home/builder/short_url.prod.secret.exs"</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$TARGET_MIX_ENV</span>"</span> = <span class="string">"prod"</span> ]; <span class="keyword">then</span></span><br><span class="line">    __sync_remote <span class="string">"</span></span><br><span class="line"><span class="string">      ln -sfn '<span class="variable">$_prod_secret_path</span>' '<span class="variable">$BUILD_AT</span>/config/prod.secret.exs'</span></span><br><span class="line"><span class="string">    "</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好后，执行以下命令。每次构建的压缩包，不记录到 <code>git</code> 记录里</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">echo <span class="string">".deliver/releases/"</span> <span class="meta">&gt;&gt; </span>.gitignore</span><br></pre></td></tr></table></figure><p><code>config/prod.exs</code> 部署配置默认有这样一句话，从系统里加载环境变量。如果你没有在部署的主机上添加变量，这句话就删除掉。别问我怎么知道的。😭</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">﻿<span class="attr">load_from_system_env:</span> <span class="literal">true</span><span class="string">,</span></span><br></pre></td></tr></table></figure><p>提交刚才配置文件的修改，并且下载依赖编译</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span> -A &amp;&amp; git commit -m <span class="string">"Setting up edeliver"</span></span><br><span class="line">mix <span class="keyword">do</span> deps.<span class="keyword">get</span>, compile</span><br></pre></td></tr></table></figure><p>其他的配置可以参考 <a href="https://github.com/edeliver/edeliver" target="_blank" rel="noopener">项目文档</a></p><p>我们的配置文件里配置的线上环境的隐私信息从 <code>/home/builder/short_url.prod.secret.exs</code> 目录获取，所以运行下面的命令。上传我们的线上配置文件。该文件是不会记录到 <code>git</code> 版本里的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp ~/你的项目/config/prod.secret.exs 主机名:/home/builder/short_url.prod.secret.exs</span><br></pre></td></tr></table></figure><h2 id="数据库设置配置"><a href="#数据库设置配置" class="headerlink" title="数据库设置配置"></a>数据库设置配置</h2><p><code>phoenix</code> 默认使用的 <code>postgreSQL</code> 数据库</p><p>切换到默认用户 <code>postgres</code></p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo su - postgres</span></span><br></pre></td></tr></table></figure><p>进入数据库</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">psql</span></span><br></pre></td></tr></table></figure><p>创建用户并赋予权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> www <span class="keyword">WITH</span> <span class="keyword">PASSWORD</span> <span class="string">'u867#eDgg6#2@elo098OIUh'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> short_url_prod OWNER www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">role</span> www login createdb;</span><br></pre></td></tr></table></figure><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>现在使用以下命令创建线上数据库的数据表</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mix</span> edeliver migrate production</span><br></pre></td></tr></table></figure><h2 id="edeliver-命令"><a href="#edeliver-命令" class="headerlink" title="edeliver 命令"></a>edeliver 命令</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mix</span> edeliver update production --start-deploy <span class="meta"># 发布应用并启动</span></span><br><span class="line"></span><br><span class="line">--branch=dev 指定使用 dev 分支 默认使用的 master</span><br><span class="line"></span><br><span class="line"><span class="built_in">mix</span> edeliver ping production <span class="meta"># 查看应用是否正在运行</span></span><br><span class="line"><span class="built_in">mix</span> edeliver upgrade  <span class="meta"># 升级应用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mix</span> edeliver version production <span class="meta"># 查看应用的版本</span></span><br><span class="line"><span class="built_in">mix</span> edeliver migrate production <span class="meta"># 运行数据库构建 执行该命令前要先部署应用</span></span><br><span class="line"><span class="built_in">mix</span> edeliver restart production <span class="meta"># 或者 start 或者 stop</span></span><br></pre></td></tr></table></figure><h3 id="migrate-数据库迁移命令"><a href="#migrate-数据库迁移命令" class="headerlink" title="migrate 数据库迁移命令"></a>migrate 数据库迁移命令</h3><p>🔔 <strong>注意</strong>  执行以下的命令之前，要先部署应用。</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mix</span> edeliver migrate production  <span class="meta"># 运行数据库构建</span></span><br><span class="line"><span class="built_in">mix</span> edeliver migrate production up <span class="meta"># 同上面的命令</span></span><br><span class="line"><span class="built_in">mix</span> edeliver migrate production down <span class="meta"># 逆向执行数据库构建 会删除所有的数据表和数据</span></span><br><span class="line"><span class="built_in">mix</span> edeliver show migrations production <span class="meta"># 执行上面的 down 命令后会显示状态</span></span><br></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>如果不幸，发布出现问题。可以在一下目录查看日志</p><p>配置文件里的 <code>DELIVER_TO=&quot;/home/web/&quot;</code> 就是我们项目的部署目录，对应的日志文件也在这里。比如我的：<code>/home/web/short_url/log</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f erlang.log.1</span><br></pre></td></tr></table></figure><h2 id="查看端口使用"><a href="#查看端口使用" class="headerlink" title="查看端口使用"></a>查看端口使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -tlunp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/media/1786864843-5a2b22b4e6cd1_articlex.png&quot; alt=&quot;1786864843-5a2b22b4e6cd1_articlex&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近使用 &lt;code&gt;Elixir&lt;/c
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>linux 服务器初始化配置流程</title>
    <link href="https://hufangyun.com/2017/linux-init/"/>
    <id>https://hufangyun.com/2017/linux-init/</id>
    <published>2017-12-08T16:00:00.000Z</published>
    <updated>2017-12-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/819542712-5a291b0bb9615_articlex.jpeg" alt="819542712-5a291b0bb9615_articlex"></p><blockquote><p>开发 <code>web</code> 应用的时候，经常需要配置服务器。我在阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2014/03/server_setup.html" target="_blank" rel="noopener">Linux服务器的初步配置流程</a> 的基础上，整理了这篇笔记。节约以后配置服务器的时间。 </p></blockquote><h2 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h2><p><code>root</code> 账户默认没有密码 安全起见 先初始化一个</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h2 id="创建-Linux-管理员账户"><a href="#创建-Linux-管理员账户" class="headerlink" title="创建 Linux 管理员账户"></a>创建 Linux 管理员账户</h2><blockquote><p>🐧 使用 <code>Linux</code> 服务器的时候，尽量不要使用 <code>root</code> 账号，处理日常操作，我们新建一个管理员账号。</p></blockquote><p>首先，添加一个用户组（这里我自定义的 admin）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addgroup admin</span><br></pre></td></tr></table></figure><p>然后，添加一个新用户（假定为 www）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -d /home/www -s /bin/bash -m www</span><br></pre></td></tr></table></figure><p>上面命令中，参数 <code>d</code> 指定用户的主目录，参数 <code>s</code> 指定用户的 <code>shell</code>，参数 <code>m</code> 表示如果该目录不存在，则创建该目录。</p><p>接着，设置新用户的密码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd www</span><br></pre></td></tr></table></figure><p>将新用户（www）添加到用户组（admin）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -a -G admin www</span><br></pre></td></tr></table></figure><p>接着，为新用户设定sudo权限。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure><p>找到下面这一行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>在这一行的下面，再添加一行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root    ALL=(ALL:ALL) ALL</span><br><span class="line">www    ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>上面的 <code>NOPASSWD</code> 表示，切换 sudo 的时候，不需要输入密码。如果出于安全考虑，也可以强制要求输入密码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root    ALL=(ALL:ALL) ALL</span><br><span class="line">www    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>最后，先退出 <code>root</code> 用户登录，再用新用户的身份登录。</p><h2 id="配置-SSH-服务"><a href="#配置-SSH-服务" class="headerlink" title="配置 SSH 服务"></a>配置 SSH 服务</h2><p>把自己电脑的 <code>ssh</code> 公钥，保存到服务器的 <code>~/.ssh/authorized_keys</code> 文件中</p><p>直接使用下面的命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@123.456.78</span><br></pre></td></tr></table></figure><p>然后，进入服务器，编辑SSH配置文件/etc/ssh/sshd_config。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/ssh/sshd_config ~     (备份，复原时使用)</span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>在配置文件中，将 SSH 的默认端口 22 改掉。假设使用 25000</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Port 25000</span><br></pre></td></tr></table></figure><p>然后，检查几个设置是否设成下面这样，确保去除前面的#号。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>Protocol 2</td><td>ssh 协议使用新版的</td></tr><tr><td>PermitRootLogin no</td><td>不允许 root 登录</td></tr><tr><td>PermitEmptyPasswords no</td><td>不允许空密码登录</td></tr><tr><td>PasswordAuthentication no</td><td>使用密码授权登录</td></tr><tr><td>RSAAuthentication yes</td><td>使用RSA算法进行安全验证</td></tr><tr><td>PubkeyAuthentication yes</td><td>允许公钥认证</td></tr><tr><td>UseDNS no</td><td>禁用DNS反向解析 会加快速度</td></tr><tr><td>SyslogFacility AUTHPRIV</td><td>记录用户登录信息</td></tr></tbody></table><p>上面主要是禁止 <code>root</code> 用户登录，以及禁止用密码方式登录。</p><p>保存后，退出文件编辑。</p><p>接着，改变authorized_keys文件的权限。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod 600 ~/.ssh/authorized_keys &amp;&amp; chmod 700 ~/.ssh/</span><br></pre></td></tr></table></figure><p>重启 SSHD</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><h2 id="运行环境配置"><a href="#运行环境配置" class="headerlink" title="运行环境配置"></a>运行环境配置</h2><p>检查服务器的区域设置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locale</span><br></pre></td></tr></table></figure><p>如果结果不是 <code>en_US.UTF-8</code>，建议都设成它。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo locale-gen en_US en_US.UTF-8 en_CA.UTF-8</span><br><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>然后，更新软件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>最后，再根据需要，做一些安全设置，比如搭建防火墙，关闭 <code>HTTP</code>、<code>HTTPs</code>、<code>SSH</code> 以外的端口，详细可参考这篇 <a href="http://spenserj.com/blog/2013/07/15/securing-a-linux-server/" target="_blank" rel="noopener">《Securing a Linux Server》</a>。</p><h2 id="特别番"><a href="#特别番" class="headerlink" title="特别番"></a>特别番</h2><h3 id="阿里云服务器"><a href="#阿里云服务器" class="headerlink" title="阿里云服务器"></a>阿里云服务器</h3><p>阿里云服务器可以在控制台设置安全组规则。</p><h4 id="什么是安全组"><a href="#什么是安全组" class="headerlink" title="什么是安全组"></a>什么是安全组</h4><p>简单点，给大家举个栗子🌰，我部署了一个 <code>MongoDB</code> 的数据库，我怕别人黑我数据库，我就可以在安全组的规则里设置 <code>公网入方向</code> 拒绝访问 <code>MongoDB</code> 使用的端口 <code>27017</code>。只允许本地 <code>locahost</code> 访问，禁止公网访问。</p><p>下面是教科书版具体解释</p><p>阿里云产品介绍 请看这里 <a href="https://www.alibabacloud.com/help/zh/doc-detail/25387.htm" target="_blank" rel="noopener">安全组</a></p><blockquote><p>安全组是一种虚拟防火墙，具备状态检测包过滤功能。安全组用于设置单台或多台云服务器的网络访问控制，它是重要的网络安全隔离手段，用于在云端划分安全域。</p><p>安全组是一个逻辑上的分组，这个分组是由同一个地域（Region）内具有相同安全保护需求并相互信任的实例组成。每个实例至少属于一个安全组，在创建的时候就需要指定。同一安全组内的实例之间网络互通，不同安全组的实例之间默认内网不通。可以授权两个安全组之间互访。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/2014/03/server_setup.html" target="_blank" rel="noopener">Linux服务器的初步配置流程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/media/819542712-5a291b0bb9615_articlex.jpeg&quot; alt=&quot;819542712-5a291b0bb9615_articlex&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开发 &lt;code&gt;web&lt;/code&gt; 应
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 目录文件权限的查看和修改</title>
    <link href="https://hufangyun.com/2017/permission/"/>
    <id>https://hufangyun.com/2017/permission/</id>
    <published>2017-11-12T07:37:17.000Z</published>
    <updated>2017-11-12T07:37:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1flfce9uxqbj30ae070myk.jpg" alt=""></p><h2 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h2><ul><li><p>第一部分的三个 rw- 代表的是 <code>所有者（user）</code>拥有的权限</p></li><li><p>中间的三个三个 r– 代表的是 <code>组群（group）</code> 拥有的权限</p></li><li><p>最后那三个 r– 代表的是 <code>其他人（other）</code> 拥有的权限</p><p><code>r</code> 表示文件可以被读（read）<br><code>w</code> 表示文件可以被写（write）<br><code>x</code> 表示文件可以被执行（如果它是程序的话）<br><code>-</code> 表示相应的权限还没有被授予</p></li></ul><p>  <code>u</code> 代表所有者（user）<br>  <code>g</code> 代表所有者所在的组群（group）<br>  <code>o</code> 代表其他人，但不是u和g （other）<br>  <code>a</code> 代表全部的人，也就是包括u，g和o<br>  <code>r</code> 表示文件可以被读（read）<br>  <code>w</code> 表示文件可以被写（write）<br>  <code>x</code> 表示文件可以被执行（如果它是程序的话）<br>　　<br>其中：<code>rwx</code> 也可以用数字来代替</p><p>   <code>r</code> ————4<br>   <code>w</code> ————2<br>   <code>x</code> ————1<br>   <code>-</code> ————0</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-rw------- (600) 只有所有者才有读和写的权限</span><br><span class="line">-rw-r--r-- (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限</span><br><span class="line">-rwx------ (700) 只有所有者才有读，写，执行的权限</span><br><span class="line">-rwxr-xr-x (755) 只有所有者才有读，写，执行的权限，组群和其他人只有读和执行的权限</span><br><span class="line">-rwx--x--x (711) 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限</span><br><span class="line">-rw-rw-rw- (666) 每个人都有读写的权限</span><br><span class="line">-rwxrwxrwx (777) 每个人都有读写和执行的权限</span><br></pre></td></tr></table></figure><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 700 /mnt/fileA</span><br><span class="line">//注：仅把fileA目录的权限设置为700</span><br><span class="line"></span><br><span class="line">chmod -R 744 /mnt/fileA</span><br><span class="line">//注：表示将整个/mnt/fileA目录与其中的文件和子目录的权限都设置为744</span><br></pre></td></tr></table></figure><p>使用命令chown改变目录或文件的所有权</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown 用户名 + 文件</span><br><span class="line"></span><br><span class="line">chown 组名: + 文件</span><br><span class="line"></span><br><span class="line">chown 用户组:用户名 + 文件</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://zhaoyuqiang.blog.51cto.com/6328846/1214718" target="_blank" rel="noopener">菜鸟Linux攻略–目录文件权限的查看和修改（详细）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1flfce9uxqbj30ae070myk.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;查看文件权限&quot;&gt;&lt;a href=&quot;#查看文件权限&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>短网址(short URL)系统的原理及其实现</title>
    <link href="https://hufangyun.com/2017/short-url/"/>
    <id>https://hufangyun.com/2017/short-url/</id>
    <published>2017-11-09T11:00:35.000Z</published>
    <updated>2018-01-29T14:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅授权过： <code>segmentfault</code> 转载</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>提供一个短址服务<br>你有没有发现，我们的任务中出现长 URL 就会比较麻烦？如果有一个短址生成器就好了。虽然市面上有很多，但是我们可以重复发明一个轮子，利用这个机会尝试一下简单的 Web 全栈开发。</p></blockquote><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>做一个短链接生成器，可以将一个长链接缩短成一个短链接。 </p><h2 id="要发车了-🚌"><a href="#要发车了-🚌" class="headerlink" title="要发车了 🚌"></a>要发车了 🚌</h2><p>发车前，和大家说一下</p><p>如果不想重复的造轮子，想开箱即用，可以使用基于 <code>PHP</code> 的开源软件 <a href="https://github.com/YOURLS/YOURLS" target="_blank" rel="noopener">YOURLS</a>。<code>YOURLS</code> 还可以和 <code>WordPress</code> 整合到一起，功能强大，可扩展性高。</p><blockquote><p>本文记录了开发短网址系统的整个过程，包括初期的算法调研、模块设计、数据库设计、功能扩展等。</p></blockquote><h2 id="什么是短链接-🔗"><a href="#什么是短链接-🔗" class="headerlink" title="什么是短链接 🔗"></a>什么是短链接 🔗</h2><blockquote><p>就是把普通网址，转换成比较短的网址。比如：<a href="http://t.cn/RlB2PdD" target="_blank" rel="noopener">http://t.cn/RlB2PdD</a> 这种，在微博这些限制字数的应用里。好处不言而喻。短、字符少、美观、便于发布、传播。 </p></blockquote><p>百度短网址 <a href="http://dwz.cn/" target="_blank" rel="noopener">http://dwz.cn/</a><br>谷歌短网址服务 <a href="https://goo.gl/" target="_blank" rel="noopener">https://goo.gl/</a> （需科学上网）号称是最快的 🚀</p><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p>当我们在浏览器里输入 <a href="http://t.cn/RlB2PdD" target="_blank" rel="noopener">http://t.cn/RlB2PdD</a> 时</p><ol><li>DNS首先解析获得 <a href="http://t.cn" target="_blank" rel="noopener">http://t.cn</a> 的 <code>IP</code> 地址</li><li>当 <code>DNS</code> 获得 <code>IP</code> 地址以后（比如：74.125.225.72），会向这个地址发送 <code>HTTP</code> <code>GET</code> 请求，查询短码 <code>RlB2PdD</code></li><li><a href="http://t.cn" target="_blank" rel="noopener">http://t.cn</a> 服务器会通过短码 <code>RlB2PdD</code> 获取对应的长 URL</li><li>请求通过 <code>HTTP</code> <code>301</code> 转到对应的长 URL <a href="https://m.helijia.com" target="_blank" rel="noopener">https://m.helijia.com</a> 。</li></ol><p>这里有个小的知识点，为什么要用 301 跳转而不是 302 呐？</p><blockquote><p>301 是永久重定向，302 是临时重定向。短地址一经生成就不会变化，所以用 301 是符合 <code>http</code> 语义的。同时对服务器压力也会有一定减少。<br>但是如果使用了 <code>301</code>，我们就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。所以选择302虽然会增加服务器压力，但是我想是一个更好的选择。 </p><p>来自知乎 iammutex 的<a href="https://www.zhihu.com/question/29270034/answer/46446911" target="_blank" rel="noopener">答案</a></p></blockquote><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>网上比较流行的算法有两种 自增序列算法、 摘要算法</p><h3 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h3><p><strong>自增序列算法</strong> 也叫永不重复算法</p><p>设置 id 自增，一个 10进制 id 对应一个 62进制的数值，1对1，也就不会出现重复的情况。这个利用的就是低进制转化为高进制时，字符数会减少的特性。</p><p>如下图：十进制 10000，对应不同进制的字符表示。 </p><p><img src="/media/WX20171116-143044@2x.png" alt="WX20171116-143044@2x"></p><p>短址的长度一般设为 6 位，而每一位是由 <code>[a - z, A - Z, 0 - 9]</code> 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合，基本上够用了。</p><p>哈哈，这里附上一个进制转换工具 <a href="http://tool.lu/hexconvert/" target="_blank" rel="noopener">http://tool.lu/hexconvert/</a> 上图的数据就是用这个工具生成的。</p><p>具体的算法实现，自行谷歌。</p><h3 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h3><ol><li>将长网址 <code>md5</code> 生成 32 位签名串,分为 4 段, 每段 8 个字节</li><li>对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与 0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理</li><li>这 30 位分成 6 段, 每 5 位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串</li><li>总的 <code>md5</code> 串可以获得 4 个 6 位串,取里面的任意一个就可作为这个长 url 的短 url 地址</li></ol><p>这种算法,虽然会生成4个,但是仍然存在重复几率</p><h3 id="两种算法对比"><a href="#两种算法对比" class="headerlink" title="两种算法对比"></a>两种算法对比</h3><p>第一种算法的好处就是简单好理解，永不重复。但是短码的长度不固定，随着 id 变大从一位长度开始递增。如果非要让短码长度固定也可以就是让 id 从指定的数字开始递增就可以了。百度短网址用的这种算法。上文说的开源短网址项目 <code>YOURLS</code> 也是采用了这种算法。<a href="https://github.com/YOURLS/YOURLS/blob/master/includes/functions.php" target="_blank" rel="noopener">源码学习</a></p><p>第二种算法，存在碰撞（重复）的可能性，虽然几率很小。短码位数是比较固定的。不会从一位长度递增到多位的。据说微博使用的这种算法。</p><p>我使用的算法一。有一个不太好的地方就是出现的短码是有序的，可能会不安全。我的处理方式是构造 62进制的字母不要按顺序排列。因为想实现自定义短码的功能，我又对算法一进行了优化，下文会介绍。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h3 id="自增序列算法流程图"><a href="#自增序列算法流程图" class="headerlink" title="自增序列算法流程图"></a>自增序列算法流程图</h3><div id="flowchart-0" class="flow-chart"></div><blockquote><p>只实现长链接转化为短链接的功能，不是很麻烦。在调研的过程中我发现<a href="https://www.dwz.cn" target="_blank" rel="noopener">百度短网址</a>可以自定义短码，我觉的这个功能挺不错，结果复杂度就是上图到下图的变化。😭</p></blockquote><h3 id="自增序列算法-用户自定义短码-流程图"><a href="#自增序列算法-用户自定义短码-流程图" class="headerlink" title="自增序列算法 + 用户自定义短码 流程图"></a>自增序列算法 + 用户自定义短码 流程图</h3><div id="flowchart-1" class="flow-chart"></div><p>百度短网址还允许用户自定义短码，算法二 摘要算法，不和 id 绑定，好像挺好实现这个功能的。</p><p>但是自增序列算法是和 id 绑定的，如果允许自定义短码就会占用之后的短码，之后的 id 要生成短码的时候就发现短码已经被用了，那么 id 自增一对一不冲突的优势就体现不出来了。</p><p><strong>那么怎么实现自定义短码呐？</strong></p><p>我是这样处理的：</p><blockquote><p>数据库增加一个类型 type 字段，用来标记短码是用户自定义生成的，还是系统自动生成的。<br>如果有用户自定义过短码，把它的类型标记自定义。每次根据 id 计算短码的时候，如果发现对应的短码被占用了，就从类型为自定义的记录里选取一条记录，用它的 id 去计算短码。<br>这样既可以区分哪些长连接是用户自己定义还是系统自动生成的，还可以不浪费被自定义短码占用的 id</p></blockquote><p>我保留了 1 到 2 位的 短码，从三位的短码开始生成的。就像域名的保留域名一样，好的要自己预留 😏 </p><table><thead><tr><th>位数</th><th>个数</th><th>区间</th></tr></thead><tbody><tr><td>1位</td><td>62</td><td>0 - 61</td></tr><tr><td>2位</td><td>3844</td><td>62 - 3843 </td></tr><tr><td>3位</td><td>约 23万</td><td>3844 - 238327</td></tr><tr><td>4位</td><td>约 1400万</td><td>238328 - 14776335</td></tr><tr><td>5位</td><td>约 9.1亿</td><td>14776336 - 916132831</td></tr><tr><td>6位</td><td>约 568亿</td><td>916132832 - 56800235583</td></tr></tbody></table><h3 id="数据表设计"><a href="#数据表设计" class="headerlink" title="数据表设计"></a>数据表设计</h3><p>links 表</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>link_id</td></tr><tr><td>url</td><td>长连接</td></tr><tr><td>keyword</td><td>短链接码</td></tr><tr><td>type</td><td>系统: “system” 自定义: “custom”</td></tr><tr><td>insert_at</td><td>插入时间</td></tr><tr><td>updated_at</td><td>更新时间</td></tr></tbody></table><h2 id="后期功能扩展"><a href="#后期功能扩展" class="headerlink" title="后期功能扩展"></a>后期功能扩展</h2><p>统计：点击量、访问的 ip 地域、用户使用的设备</p><p>管理后台：删除、数据量</p><p>登录：权限管理</p><p>设置密码：输入密码才可以继续访问</p><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p>使用 Elixir + phoenix 技术栈 <a href="https://github.com/Youthink/short_url" target="_blank" rel="noopener">short_url</a> </p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始e=>end: 结束io1=>inputoutput: 输入网址io2=>inputoutput: 返回短网址op1=>operation: 返回对应的短码op2=>operation: 保存输入的网址到数据库op3=>operation: 根据id计算对应的短码op4=>operation: 更新短码到数据库cond1=>condition: 查询数据库是否存在对应的短码st->io1->cond1cond1(no,bottom)->op2->op3->op4->op1->io2->econd1(yes)->op1->io2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始e=>end: 结束io1=>inputoutput: 输入网址io2=>inputoutput: 返回短网址io3=>inputoutput: 提示用户该短码已存在io4=>inputoutput: 提示用户不能输入短链接op1=>operation: 返回短码op2=>operation: 保存输入的网址到数据库op3=>operation: 根据id计算对应的短码op4=>operation: 查询数据库获得一条自定义短码的url对应的id记录op5=>operation: 更新短码到数据库cond1=>condition: 查询数据库是否存在该URLcond2=>condition: 用户选择自定义短码cond3=>condition: 生成的短码是否存在cond4=>condition: 短码是否存在cond5=>condition: 短码是否存在cond6=>condition: 自定义的短码是否存在cond7=>condition: 用户输入的是短链接st->io1->cond7cond7(no,bottom)->cond1cond7(yes)->io4->econd1(no,bottom)->cond2cond1(yes)->op1->io2->econd2(no,bottom)->op3->cond4cond2(yes)->cond5cond4(no, bottom)->op5->op1->io2->econd4(yes)->op4->op3->cond4cond5(no,bottom)->op5cond5(yes)->io3->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文仅授权过： &lt;code&gt;segmentfault&lt;/code&gt; 转载&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;提供一个短址服务&lt;br&gt;你
      
    
    </summary>
    
      <category term="最热" scheme="https://hufangyun.com/categories/%E6%9C%80%E7%83%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>仅凭一行感想，唤醒一册记忆</title>
    <link href="https://hufangyun.com/2017/book-a-line/"/>
    <id>https://hufangyun.com/2017/book-a-line/</id>
    <published>2017-11-01T16:05:09.000Z</published>
    <updated>2017-11-19T11:07:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在阅读印南敦史的《快速阅读术》时，发现的一种读书方式。可以点击我的<a href="/2017/book-kuaisuyuedushu">读书笔记</a>简单了解。</p><p>以后我也采用三个一行的形式去整理可以快速阅读的书籍。</p></blockquote><p><strong>一行采集</strong> 将摘录的内容控制在几行之内</p><p><strong>一行精华</strong> 读书之魂，凝于一文</p><p><strong>一行感想</strong> 仅凭“一行感想”，唤醒“一册记忆”</p><p><strong>阅读的妙趣，不正是在于邂逅“那一行”吗？</strong></p><h3 id="《万物有灵且美》"><a href="#《万物有灵且美》" class="headerlink" title="《万物有灵且美》"></a>《万物有灵且美》</h3><h4 id="一行精华"><a href="#一行精华" class="headerlink" title="一行精华"></a>一行精华</h4><blockquote><p>活泼的生命完全无须借助魔法，便能对我们述说至美至真的故事。大自然的真实面貌，比起诗人所能描摹的境界，更要美上千百倍。</p></blockquote><h4 id="一行采摘"><a href="#一行采摘" class="headerlink" title="一行采摘"></a>一行采摘</h4><blockquote><p>每当我钻进被窝搂着海伦时，我都会想到这世界上再也没有比在天寒地冻的夜里搂着自己的好女人更享受的事。</p></blockquote><p>本书的第一句话，这样开篇，我被逗乐了。生活中的小确幸，作为兽医的作者寒冷的冬天出诊，每次回到家都有妻子的关怀，好女人。</p><blockquote><p>这个道理我永远不会忘记：疾病之所以会带给动物（甚或人类）死亡，往往是因为其痛苦与恐惧已经先吞蚀了患者的生存意志。因此，只要你能除却它的痛苦或恐惧，奇迹时常会发生。也许这种说法是不合乎理性的，然而我的确在现实生活中发现了这样的例子。</p></blockquote><p>生存的意志。希望。</p><blockquote><p>我觉的这是恣意浪费你的感触的最好时刻。你可以细致的领会和风扫过汗毛的感觉，也可以沉醉在一切化为乌有的虚无之中。</p></blockquote><p>生活的小确幸之二。能有这样的闲暇感受生活的美好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在阅读印南敦史的《快速阅读术》时，发现的一种读书方式。可以点击我的&lt;a href=&quot;/2017/book-kuaisuyuedushu&quot;&gt;读书笔记&lt;/a&gt;简单了解。&lt;/p&gt;
&lt;p&gt;以后我也采用三个一行的形式去整理可以快速阅读的书籍。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="读书" scheme="https://hufangyun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>《快速阅读术》流水式阅读法</title>
    <link href="https://hufangyun.com/2017/book-kuaisuyuedushu/"/>
    <id>https://hufangyun.com/2017/book-kuaisuyuedushu/</id>
    <published>2017-11-01T15:37:23.000Z</published>
    <updated>2017-11-01T15:37:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>印南敦史的这本《快速阅读术》，看书名我还以为是内容空泛的书籍，但是读完收获颇丰。</p></blockquote><h2 id="流水式阅读法"><a href="#流水式阅读法" class="headerlink" title="流水式阅读法"></a>流水式阅读法</h2><p>适合新书、财经类、</p><p>不适合小说散文类书籍</p><p>1、小标题为单位跳读</p><p>2、确定关键词阅读</p><p>3、通过阅读这本书想要收获什么</p><p>4、阅读目录，挑选感兴趣的章节</p><h2 id="如何养成读书习惯"><a href="#如何养成读书习惯" class="headerlink" title="如何养成读书习惯"></a>如何养成读书习惯</h2><p>1、每天同一时间读书，容易养成习惯</p><p>2、每天只读10分钟，有明天还想读的迫切心情。</p><p>对于早上睡不醒、起床有困难的人来说，如果能坚持做到“睡醒后先阅读10分钟”，那么在早晨刚醒来最难受的10分钟里，就可以逐渐让意识清醒，之后便可以非常轻松地起床了，可谓一举两得。</p><p>3、选择快速阅读的书籍，创造一个接连不断阅读各类书籍的氛围，让自己感受到切实的进展。这种已读书目不断积累的感觉，是养成阅读习惯不可或缺的巨大动力。</p><h2 id="一行精华"><a href="#一行精华" class="headerlink" title="一行精华"></a>一行精华</h2><p>读书的真正意义，并不在于“复制100%”的原文，而是在于“邂逅1%”的收获。</p><p>阅读的妙趣，不正是在于邂逅“那一行”吗？</p><p><strong>一行采集</strong> 将摘录的内容控制在几行之内</p><p><strong>一行精华</strong> 读书之魂，凝于一文</p><p><strong>一行感想</strong> 仅凭“一行感想”，唤醒“一册记忆”</p><p>为什么这一行让你产生共鸣</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;印南敦史的这本《快速阅读术》，看书名我还以为是内容空泛的书籍，但是读完收获颇丰。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;流水式阅读法&quot;&gt;&lt;a href=&quot;#流水式阅读法&quot; class=&quot;headerlink&quot; title=&quot;流水式阅读
      
    
    </summary>
    
      <category term="读书" scheme="https://hufangyun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>一次掌握 JavaScript ES5 到 ES8 数组内容</title>
    <link href="https://hufangyun.com/2017/array-learn/"/>
    <id>https://hufangyun.com/2017/array-learn/</id>
    <published>2017-10-30T23:46:39.000Z</published>
    <updated>2018-05-13T23:46:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/array.jpg" alt="array"></p><p>图片来源：<a href="https://github.com/tooto1985/js-array-operations" target="_blank" rel="noopener">Yi-Tai Lin</a></p><p>本文仅授权过： <code>前端早读课</code> 转载</p><h2 id="ECMAScript-5-1-中提供的数组方法"><a href="#ECMAScript-5-1-中提供的数组方法" class="headerlink" title="ECMAScript 5.1 中提供的数组方法"></a>ECMAScript 5.1 中提供的数组方法</h2><p>其中部分方法，ECMAScript 3 就出现了，但是本文不再细分。</p><p><a href="https://www.ecma-international.org/ecma-262/5.1/#sec-15.4" target="_blank" rel="noopener">ECMA-262/5.1 规范</a></p><h4 id="判断是否是数组"><a href="#判断是否是数组" class="headerlink" title="判断是否是数组"></a>判断是否是数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray ( arg )</span><br><span class="line"><span class="comment">// false or true</span></span><br></pre></td></tr></table></figure><p>不支持此方法的IE9-等浏览器可以这样处理：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span>;</span><br></pre></td></tr></table></figure><h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>数组的 <code>valueOf</code> 会默认调用 <code>toString</code> 方法，所以他们的返回值一样，都是逗号分隔每一项组成的字符串</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> months = [<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>];</span><br><span class="line">months.toString(); <span class="comment">// "Jan,Feb,Mar,Apr"</span></span><br></pre></td></tr></table></figure><h4 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString"></a>toLocaleString</h4><p>调用数组每一项的 <code>toLocaleString</code> 方法，有时和 <code>toString</code> 方法的结果是一样的。有时也不同，比如 <code>Date</code> 对象元素组成的数组里，返回的结果会不同。</p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.join();      <span class="comment">// 'Wind,Rain,Fire'</span></span><br><span class="line">a.join(<span class="string">', '</span>);  <span class="comment">// 'Wind, Rain, Fire'</span></span><br><span class="line">a.join(<span class="string">' + '</span>); <span class="comment">// 'Wind + Rain + Fire'</span></span><br><span class="line">a.join(<span class="string">''</span>);    <span class="comment">// 'WindRainFire'</span></span><br></pre></td></tr></table></figure><p>如果数组中的某一项的值是 <code>null</code> 或者 <code>undefined</code>，那么该值在 <code>join()</code>、<code>toLocale-String()</code>、<code>toString()</code> 和 <code>valueOf()</code> 方法返回的结果中以空字符串表示</p><p>对应的逆向方法是 <code>String.split()</code></p><h3 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h3><h4 id="pop-删除数组的最后一项"><a href="#pop-删除数组的最后一项" class="headerlink" title="pop 删除数组的最后一项"></a>pop 删除数组的最后一项</h4><p>操作原数组，返回删除项</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.pop();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="push-在数组末尾添加新元素"><a href="#push-在数组末尾添加新元素" class="headerlink" title="push 在数组末尾添加新元素"></a>push 在数组末尾添加新元素</h4><p>操作的原数组，返回数组长度</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.push(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h3><h4 id="shift-删除数组的第一项"><a href="#shift-删除数组的第一项" class="headerlink" title="shift 删除数组的第一项"></a>shift 删除数组的第一项</h4><p>操作的原数组，返回删除项</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.shift();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="unshift-数组的前面添加新元素"><a href="#unshift-数组的前面添加新元素" class="headerlink" title="unshift 数组的前面添加新元素"></a>unshift 数组的前面添加新元素</h4><p>操作的原数组，返回数组长度</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.unshift(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [4, 5, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h3><h4 id="reverse-反转数组项的顺序"><a href="#reverse-反转数组项的顺序" class="headerlink" title="reverse 反转数组项的顺序"></a>reverse 反转数组项的顺序</h4><p>操作原数组，返回数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line"><span class="keyword">var</span> b= a.reverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ['three', 'two', 'one']</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ['three', 'two', 'one']</span></span><br></pre></td></tr></table></figure><h4 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort 排序"></a>sort 排序</h4><p>按照 Unicode code 位置排序，默认升序</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruit = [<span class="string">'cherries'</span>, <span class="string">'apples'</span>, <span class="string">'bananas'</span>];</span><br><span class="line">fruit.sort(); <span class="comment">// ['apples', 'bananas', 'cherries']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">2</span>];</span><br><span class="line">scores.sort(); <span class="comment">// [1, 10, 2, 21]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// because '10' is mix of two characters '1' and '0' so '10' is before '2' in Unicode code point order.</span></span><br></pre></td></tr></table></figure><p>排序后 <code>undefined</code> 会被放在数组末尾</p><p>之前写过一篇排序方法的深入解读，感兴趣请点击这里</p><p><a href="https://segmentfault.com/a/1190000010648740" target="_blank" rel="noopener">深入浅出 JavaScript 的 Array.prototype.sort 排序算法</a></p><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><h4 id="concat-合并数组"><a href="#concat-合并数组" class="headerlink" title="concat 合并数组"></a>concat 合并数组</h4><p>返回新数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br><span class="line"><span class="comment">// expected output: ["a", "b", "c", "d", "e", "f"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr4 = arr1.concat(<span class="number">1</span>, [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]);</span><br><span class="line"><span class="built_in">console</span>.log(arr4);</span><br><span class="line"><span class="comment">//猜猜这个的结果？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： ['a', 'b', 'c', 1, 4, [5, 6]]</span></span><br><span class="line"><span class="comment">//如果传入的是数组，取的是其值。但是数组中的数组，是保留的。</span></span><br></pre></td></tr></table></figure><h4 id="slice-基于当前数组创建新数组"><a href="#slice-基于当前数组创建新数组" class="headerlink" title="slice 基于当前数组创建新数组"></a>slice 基于当前数组创建新数组</h4><p>返回新数组</p><p>传入两个参数 起始位置（包含） 结束位置（不包含），虎头蛇尾，有始无终。</p><p>只传一个参数默认截取到数组末尾, 会认为是开始位置</p><p>传递的参数中有一个负数，则用数组长度加上该数来确定位置。长度为 5 的数组 <code>slice（-2，-1）</code> 与 <code>slice（3, 4）</code> 结果相同。</p><p>结束位置小于起始位置，则返回空数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>];</span><br><span class="line"><span class="keyword">var</span> sliced = a.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);      <span class="comment">// ['1', '2', '3', '4']</span></span><br><span class="line"><span class="built_in">console</span>.log(sliced); <span class="comment">// ['2', '3']</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p>可以实现 删除、插入（元素个数大于要删除的元素个数）、替换（删除一个，再添加一个）</p><p>返回被删除元素组成的数组，如果没有被删除元素，返回空数组</p><p>参数： 起始位置(包含)、要删除的元素个数、元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line"></span><br><span class="line">myFish.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'drum'</span>);</span><br><span class="line"><span class="comment">// ["angel", "clown", "drum", "mandarin", "sturgeon"]</span></span><br><span class="line"></span><br><span class="line">myFish.splice(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// ["angel", "clown", "mandarin", "sturgeon"]</span></span><br><span class="line"></span><br><span class="line">myFish.splice(<span class="number">-1</span>, <span class="number">0</span>, <span class="string">'drum'</span>);</span><br><span class="line"><span class="comment">//["angel", "clown", "mandarin", "drum", "sturgeon"]</span></span><br></pre></td></tr></table></figure><p>区别于 <code>concat</code> 如果插入数组，就会插入数组，而不是将数组拆开。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myFish.splice(<span class="number">2</span>, <span class="number">1</span>, [<span class="string">"hello"</span>, <span class="string">"world"</span>]);</span><br><span class="line"><span class="comment">// ["angel", "clown", ["hello", "world"], "sturgeon"]</span></span><br></pre></td></tr></table></figure><h3 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h3><p><code>indexOf</code> 和 <code>lastIndexOf</code> 都接受两个参数：查找的值、查找起始位置</p><p>不存在，返回 -1 ；存在，返回位置。<code>indexOf</code> 是从前往后查找， <code>lastIndexOf</code> 是从后往前查找。</p><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>];</span><br><span class="line">a.indexOf(<span class="number">2</span>); <span class="comment">// 0</span></span><br><span class="line">a.indexOf(<span class="number">7</span>); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a.indexOf(<span class="number">7</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// element doesn't exist in array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>);     <span class="comment">// 3</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">7</span>);     <span class="comment">// -1</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">3</span>);  <span class="comment">// 3</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">2</span>);  <span class="comment">// 0</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">-2</span>); <span class="comment">// 0</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">-1</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>ECMAScript 5 提供了5个迭代方法，他们的参数都是</p><p>给定的函数(当前元素、位置、数组)</p><p>可选的，执行回调是的 this 值</p><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><p>对数组的每一项都运行给定的函数，每一项都返回 ture,则返回 true</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &lt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>].every(isBigEnough);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><p>对数组的每一项都运行给定的函数，任意一项返回 ture,则返回 true</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBiggerThan10</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>对数组的每一项都运行给定的函数，返回 结果为 ture 的项组成的数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> words = [<span class="string">"spray"</span>, <span class="string">"limit"</span>, <span class="string">"elite"</span>, <span class="string">"exuberant"</span>, <span class="string">"destruction"</span>, <span class="string">"present"</span>, <span class="string">"happy"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longWords = words.filter(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> word.length &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Filtered array longWords is ["exuberant", "destruction", "present"]</span></span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>对数组的每一项都运行给定的函数，返回每次函数调用的结果组成一个新数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">var</span> doubles = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// doubles is now [2, 10, 20, 30]</span></span><br><span class="line"><span class="comment">// numbers is still [1, 5, 10, 15]</span></span><br></pre></td></tr></table></figure><h4 id="forEach-数组遍历"><a href="#forEach-数组遍历" class="headerlink" title="forEach 数组遍历"></a>forEach 数组遍历</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> items = [<span class="string">'item1'</span>, <span class="string">'item2'</span>, <span class="string">'item3'</span>];</span><br><span class="line"><span class="keyword">const</span> copy = [];</span><br><span class="line"></span><br><span class="line">items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">  copy.push(item)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="缩小方法"><a href="#缩小方法" class="headerlink" title="缩小方法"></a>缩小方法</h3><p>reduce、reduceRight 一个是从前往后遍历，一个是从后往前遍历，比上面的五个迭代方法回调函数多了一个参数：上一项的值</p><p>回调函数参数(累加器返回的值、当前元素、当前的位置、数组) 初始值</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="noopener">MDN reduce</a></p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = numbers.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">accumulator, currentValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br></pre></td></tr></table></figure><p><strong>实战例子</strong></p><p>将数组转化成所需格式的对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;<span class="attr">envName</span>: <span class="string">'stg'</span>, <span class="attr">cpu</span>: <span class="number">4</span>, <span class="attr">memory</span>: <span class="number">2</span>&#125;, </span><br><span class="line">  &#123;<span class="attr">envName</span>: <span class="string">'pre'</span>, <span class="attr">cpu</span>: <span class="number">2</span>, <span class="attr">memory</span>: <span class="number">4</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> newObj = arr.reduce(<span class="function">(<span class="params">acc, o</span>) =&gt;</span> &#123;</span><br><span class="line">  acc[o.envName] = &#123;</span><br><span class="line">    cpu: o.cpu,</span><br><span class="line">    memory: o.memory</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newObj);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"stg"</span>: &#123;</span><br><span class="line">    <span class="string">"cpu"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"memory"</span>: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"pre"</span>: &#123;</span><br><span class="line">    <span class="string">"cpu"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"memory"</span>: <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(b);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// flattened is [4, 5, 2, 3, 0, 1]</span></span><br></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>队列方法和栈方法操作的都是原数组，增加数组元素的时候，返回值是数组长度；删除数组元素的时候，返回值是被删除的元素。</p><h4 id="哪些方法改变了原数组？"><a href="#哪些方法改变了原数组？" class="headerlink" title="哪些方法改变了原数组？"></a>哪些方法改变了原数组？</h4><p>栈方法：push、pop</p><p>队列方法：shift、unshift</p><p>重排序方法：reverse、sort</p><p>操作方法：splice</p><h4 id="哪些方法返回的是数组？"><a href="#哪些方法返回的是数组？" class="headerlink" title="哪些方法返回的是数组？"></a>哪些方法返回的是数组？</h4><p>重排序方法：reverse、sort</p><p>操作方法：splice、slice、concat</p><p>迭代方法中：filter、map</p><h2 id="ECMAScript-6-0-新增的方法"><a href="#ECMAScript-6-0-新增的方法" class="headerlink" title="ECMAScript 6.0 新增的方法"></a>ECMAScript 6.0 新增的方法</h2><p><a href="https://www.ecma-international.org/ecma-262/6.0/#sec-array-objects" target="_blank" rel="noopener">ECMA-262/6.0 规范</a></p><h4 id="from"><a href="#from" class="headerlink" title="from"></a>from</h4><p>将类似数组的对象（array-like object）和可遍历（iterable）的对象转为真正的数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="built_in">Array</span>.from(bar);</span><br><span class="line"><span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">'foo'</span>);</span><br><span class="line"><span class="comment">// ["f", "o", "o"]</span></span><br></pre></td></tr></table></figure><h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><p>用于将一组值，转换为数组</p><p>这个方法的主要目的，是弥补数组构造函数 <code>Array()</code> 的不足。因为参数个数的不同，会导致 <code>Array()</code> 的行为有差异。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>() <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>);       <span class="comment">// [7]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">7</span>);          <span class="comment">// [ , , , , , , ]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h4><p>将指定位置的元素复制到其他位置（会覆盖原有元素），返回当前数组。该方法会修改当前数组。</p><p>它接受三个参数。</p><ul><li>target（必需）：从该位置开始替换数据。</li><li>start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。</li><li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 1, 2]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p>使用给定值，填充一个数组。</p><p>会抹除数组原有的元素</p><p>还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">numbers.fill(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// results in [1, 1, 1]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>找出第一个符合条件的数组元素，参数是一个回调函数，所有数组元素依次执行该回调函数，直到找出第一个返回值为 <code>true</code> 的元素，然后返回该元素。如果没有符合条件的元素，则返回 <code>undefined</code>。回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><p><code>findIndex</code> 方法的用法与 <code>find</code> 方法非常类似，返回第一个符合条件的数组元素的位置，如果所有元素都不符合条件，则返回 -1。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>ES6 提供三个新的方法—— entries()，keys()和 values() —— 用于遍历数组。它们都返回一个遍历器对象，可以用 for…of 循环进行遍历，唯一的区别是 keys() 是对键名的遍历、values() 是对键值的遍历，entries() 是对键值对的遍历。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "a"</span></span><br><span class="line"><span class="comment">// 1 "b"</span></span><br></pre></td></tr></table></figure><h4 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = a.entries();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = arr.keys();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h4 id="values"><a href="#values" class="headerlink" title="values"></a>values</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'k'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = a.values();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// w</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// y</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// k</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// o</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// p</span></span><br></pre></td></tr></table></figure><p>更多使用方式，可以参考 <a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">阮一峰 ECMAScript 6入门</a></p><h2 id="ECMAScript-7-0-新增的方法"><a href="#ECMAScript-7-0-新增的方法" class="headerlink" title="ECMAScript 7.0 新增的方法"></a>ECMAScript 7.0 新增的方法</h2><p><a href="https://www.ecma-international.org/ecma-262/7.0/#sec-properties-of-the-array-prototype-object" target="_blank" rel="noopener">ECMA-262/7.0 规范</a></p><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><p>判断数组中是否存在该元素</p><p>参数：查找的值、起始位置</p><p>可以替换 ES5 时代的 <code>indexOf</code> 判断方式</p><p><code>indexOf</code> 判断元素是否为 <code>NaN</code>，会判断错误</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a = [1, 2, 3];</span><br><span class="line">a.includes(2); // true</span><br><span class="line">a.includes(4); // false</span><br></pre></td></tr></table></figure><p><a href="https://www.ecma-international.org/ecma-262/8.0/index.html#sec-array-objects" target="_blank" rel="noopener">ECMA-262/8.0 规范</a></p><p>ES8 没增加数组方法</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>JavaScript 高级程序设计</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN web docs</a></p><p><a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">阮一峰 ECMAScript 6入门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/media/array.jpg&quot; alt=&quot;array&quot;&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href=&quot;https://github.com/tooto1985/js-array-operations&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="最热" scheme="https://hufangyun.com/categories/%E6%9C%80%E7%83%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>【随用随查】PostgreSQL 实践笔记</title>
    <link href="https://hufangyun.com/2017/sql-postgres/"/>
    <id>https://hufangyun.com/2017/sql-postgres/</id>
    <published>2017-10-30T14:24:45.000Z</published>
    <updated>2018-03-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录了 <code>PostgreSQL</code> 基本操作，入门的 <code>SQL</code> 语句以及高阶的联表查询等内容。本文自用，时常更新。<code>PostgreSQL</code> 和 <code>MySQL</code> 的 <code>SQL</code> 语句基本相同，应该选择哪个？可以参考文末的<a href="#扩展阅读">扩展阅读</a>。</p></blockquote><p><img src="/media/postgresql-logo.png" alt="postgresql-logo"></p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://pg.sjk66.com/" target="_blank" rel="noopener">PostgreSQL轻松学</a></p><p><a href="http://www.w3school.com.cn/sql/sql_func_format.asp" target="_blank" rel="noopener">w3schoolSQL教程</a></p><p><a href="https://www.postgresql.org/docs/9.6/static/reference.html" target="_blank" rel="noopener">PostgreSQL 英文文档</a></p><p><a href="http://wiki.jikexueyuan.com/project/sql/" target="_blank" rel="noopener">极客学院SQL教程</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="http://blog.everlose.com/mac-homebrew-postgresql.html" target="_blank" rel="noopener">Mac 下使用 homebrew 安装 postgresql 及配置</a> </p><h5 id="mac-启动-postgreSQL-服务"><a href="#mac-启动-postgreSQL-服务" class="headerlink" title="mac 启动 postgreSQL 服务"></a>mac 启动 postgreSQL 服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pg_ctl -D /usr/local/var/postgres start</span><br></pre></td></tr></table></figure><h5 id="连接远程数据库"><a href="#连接远程数据库" class="headerlink" title="连接远程数据库"></a>连接远程数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psql -h IP或者主机地址 -p 端口 -U 用户 -d 数据库</span><br><span class="line"></span><br><span class="line">psql -h 117.12.116.18 -p 5432 -U web -d test</span><br></pre></td></tr></table></figure><h5 id="控制台命令"><a href="#控制台命令" class="headerlink" title="控制台命令"></a>控制台命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\h：查看SQL命令的解释，比如\h select。</span><br><span class="line">\?：查看psql命令列表。</span><br><span class="line">\l：列出所有数据库。</span><br><span class="line">\c [database_name]：连接其他数据库。</span><br><span class="line">\d：列出当前数据库的所有表格。</span><br><span class="line">\d [table_name]：列出某一张表格的结构。</span><br><span class="line">\du：列出所有用户。</span><br><span class="line">\q：退出数据库。</span><br><span class="line">\conninfo：列出当前数据库和连接的信息。</span><br></pre></td></tr></table></figure><h5 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">name</span>;</span><br><span class="line"># 创建新表 </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (<span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>), signup_date <span class="built_in">DATE</span>);</span><br><span class="line"># 插入数据 </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span>(<span class="keyword">name</span>, signup_date) <span class="keyword">VALUES</span>(<span class="string">'小猿大圣'</span>, <span class="string">'2017-01-15'</span>);</span><br><span class="line"># 选择记录 </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"># 更新数据 </span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'小猿大圣'</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'小猿大圣'</span>;</span><br><span class="line"># 删除记录 </span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'小猿大圣'</span> ;</span><br><span class="line"># 添加栏位 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ADD</span> email <span class="built_in">VARCHAR</span>(<span class="number">40</span>);</span><br><span class="line"># 更新结构 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> signup_date <span class="keyword">SET</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"># 更名栏位 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> signup_date <span class="keyword">TO</span> signup;</span><br><span class="line"># 删除栏位 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> email;</span><br><span class="line"># 删除表格 </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> backups;</span><br><span class="line"># 删除数据，速度快，会保留表结构</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> tablename;</span><br><span class="line"># 删除数据以及外键</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> tablename <span class="keyword">CASCADE</span>;</span><br><span class="line"># 求平均值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(helper) <span class="keyword">FROM</span> games;</span><br><span class="line"># 求最大值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(helper_num) <span class="keyword">FROM</span> games;</span><br><span class="line"># 求数量不重复</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> open_id) <span class="keyword">FROM</span> games;</span><br><span class="line"># 求和</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(amount) <span class="keyword">FROM</span> games; </span><br><span class="line"># 模糊查询</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'小猿大%'</span>;</span><br><span class="line"># 排序 ASC 升序 默认，DESC 降序</span><br><span class="line"><span class="keyword">SELECT</span> c1, c2 <span class="keyword">FROM</span> tbl_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> c1 <span class="keyword">ASC</span>, c2 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查出表中有重复的 id 的记录，并计算相同 id 的数量</span><br><span class="line"><span class="keyword">SELECT</span> user_id,<span class="keyword">COUNT</span>(user_id) <span class="keyword">FROM</span> games <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id <span class="keyword">HAVING</span> (<span class="keyword">COUNT</span>(user_id)&gt;<span class="number">1</span>)</span><br><span class="line"># 合集 合并 Helpers 表和 Games 表 的 user_id 字段 (ALL 是不去重)</span><br><span class="line"><span class="keyword">SELECT</span> user_id <span class="keyword">FROM</span> games <span class="keyword">UNION</span> ALL <span class="keyword">SELECT</span> assistance_user_id <span class="keyword">FROM</span> helpers;</span><br><span class="line"># 统计上表中的字段重复的次数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>,<span class="keyword">COUNT</span>(<span class="keyword">count</span>) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> user_id,<span class="keyword">COUNT</span>(user_id) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> user_id <span class="keyword">FROM</span> games <span class="keyword">UNION</span> ALL <span class="keyword">SELECT</span> assistance_user_id <span class="keyword">FROM</span> helpers ) <span class="keyword">AS</span> foo;</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="如何从-csv-文件更新数据到数据库？-点击我"><a href="#如何从-csv-文件更新数据到数据库？-点击我" class="headerlink" title="如何从 csv 文件更新数据到数据库？ 点击我"></a>如何从 <code>csv</code> 文件更新数据到数据库？ <a href="https://stackoverflow.com/questions/8910494/how-to-update-selected-rows-with-values-from-a-csv-file-in-postgres" target="_blank" rel="noopener">点击我</a></h4><h4 id="如果将查询结果导出到-csv-文件"><a href="#如果将查询结果导出到-csv-文件" class="headerlink" title="如果将查询结果导出到 csv 文件"></a>如果将查询结果导出到 <code>csv</code> 文件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\copy (<span class="keyword">select</span> <span class="keyword">distinct</span> helpers.open_id <span class="keyword">from</span> helpers <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">users</span> <span class="keyword">on</span> helpers.open_id = users.open_id  <span class="keyword">where</span> users.open_id <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">union</span> <span class="keyword">select</span> open_id <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> exchanges)) <span class="keyword">TO</span> <span class="string">'/tmp/rm_openid.csv'</span> (<span class="keyword">format</span> CSV);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\copy (<span class="keyword">select</span> union_id  <span class="keyword">From</span> <span class="keyword">users</span> <span class="keyword">where</span> open_id <span class="keyword">is</span> <span class="literal">null</span>) <span class="keyword">TO</span> <span class="string">'/tmp/filename.csv'</span> (<span class="keyword">format</span> CSV);</span><br></pre></td></tr></table></figure><h4 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h4><p><strong>备份数据库数据</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pg_dump <span class="comment">--host 地址 --port 端口 --username 数据库的用户名 &gt; 导出的文件 数据库名字</span></span><br><span class="line"></span><br><span class="line">例子:</span><br><span class="line"></span><br><span class="line">pg_dump <span class="comment">--host xxxxx.com --port 3434 --username admin  &gt; file.sql dataname</span></span><br></pre></td></tr></table></figure><p><strong>数据导入数据库</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">psql -d 数据库名字 -f 文件名 用户名</span><br><span class="line"></span><br><span class="line">例子:</span><br><span class="line"></span><br><span class="line">psql -d dataname -f file.sql admin</span><br></pre></td></tr></table></figure><h4 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h4><p>将来补充</p><h4 id="用户、角色、权限管理"><a href="#用户、角色、权限管理" class="headerlink" title="用户、角色、权限管理"></a>用户、角色、权限管理</h4><p><a href="http://www.jianshu.com/p/b09d0b29faa9" target="_blank" rel="noopener">PostgreSQL学习笔记(九) 用户、角色、权限管理</a></p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="http://www.infoq.com/cn/news/2013/12/mysql-vs-postgresql" target="_blank" rel="noopener">MySQL与PostgreSQL：该选择哪个开源数据库？哪一个更好？</a></p><p><a href="http://www.infoq.com/cn/news/2015/03/why-postgresql-not-mysql" target="_blank" rel="noopener">为什么选择PostgreSQL而不是MySQL</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文记录了 &lt;code&gt;PostgreSQL&lt;/code&gt; 基本操作，入门的 &lt;code&gt;SQL&lt;/code&gt; 语句以及高阶的联表查询等内容。本文自用，时常更新。&lt;code&gt;PostgreSQL&lt;/code&gt; 和 &lt;code&gt;MySQL&lt;/code
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>咖啡带来了久违的技术兴奋</title>
    <link href="https://hufangyun.com/2017/coffee-night/"/>
    <id>https://hufangyun.com/2017/coffee-night/</id>
    <published>2017-10-18T18:21:41.000Z</published>
    <updated>2017-11-12T10:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>咖啡带来了久违的技术兴奋。</p><p>今天试着喝了点咖啡。有点小兴奋，哎，久违的感觉。工作之后，就很少有熬夜熬到兴奋的情况了。每次都是感觉很累，想睡。</p><p>大学的时候，经常熬夜各种折腾，技术给我的莫名兴奋，会让我像打了鸡血一样，熬战到天明。这种感觉很久没有来临过了。</p><p>声音，只剩下了耳机里音乐的流转和键盘敲击的清脆。<br>光亮，只剩下了漆黑房间内的电脑屏幕。</p><p>我喜欢这样的氛围，喜欢在光与暗的结合里，技术带给我的小确幸。</p><p>2017-11-12 更新</p><p>凛冬已至，夜幕降临的越来越早了。我喜欢这样的季节，这样的夜晚，宅在家里，关闭房间内所有的灯光，在键盘的背光下敲击、思考。</p><p>将来，想把家里装修成最舒服的地方。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咖啡带来了久违的技术兴奋。&lt;/p&gt;
&lt;p&gt;今天试着喝了点咖啡。有点小兴奋，哎，久违的感觉。工作之后，就很少有熬夜熬到兴奋的情况了。每次都是感觉很累，想睡。&lt;/p&gt;
&lt;p&gt;大学的时候，经常熬夜各种折腾，技术给我的莫名兴奋，会让我像打了鸡血一样，熬战到天明。这种感觉很久没有来临
      
    
    </summary>
    
      <category term="随笔" scheme="https://hufangyun.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
