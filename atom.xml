<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡方运的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hufangyun.com/"/>
  <updated>2018-12-14T16:05:52.000Z</updated>
  <id>https://hufangyun.com/</id>
  
  <author>
    <name>小猿大圣</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码整洁之道</title>
    <link href="https://hufangyun.com/2018/code-clean/"/>
    <id>https://hufangyun.com/2018/code-clean/</id>
    <published>2018-12-01T16:05:52.000Z</published>
    <updated>2018-12-14T16:05:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习和实践过程中，如果遇到其他的内容，我会逐渐完善这篇文章。以致于写出更好的代码。</p></blockquote><blockquote><p>以下内容选自 《代码整洁之道》 和 《重构》</p></blockquote><p>沃德原则：“如果每个例程都让你感到深合己意，那就是整洁代码。</p><p>代码应当讲述事实，不引人猜测。</p><p>软件项目的主要成本在于长期维护。所以，代码应当清晰地表达其作者的意图。作者把代码写得越清晰，其他人花在理解代码上的时间也就越少，从而减少缺陷，缩减维护成本。</p><p>写整洁代码，需要遵循大量的小技巧，贯彻刻苦习得的“整洁感”。</p><h2 id="通用规则"><a href="#通用规则" class="headerlink" title="通用规则"></a>通用规则</h2><ul><li>别重复自己的代码。</li></ul><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul><li><p>有意义的命名。</p><pre><code>让读代码的人，一下看到变量名、文件名、函数名，就知道这是做什么的。比如写了一个函数，里面的每一个命名，都可以让大家明白这个语句是做什么的。</code></pre></li><li><p>提防使用不同之处较小的名称。</p><pre><code>补全的时候不方便。也难以区分。</code></pre></li></ul><ul><li><p>类名和对象名应该是名词或名词短语，不应该使用动词。</p></li><li><p>方法名应该是动词或者动词短语。</p></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>函数要保持短小，20行封顶最佳。</p></li><li><p>函数应该只做一件事。</p><pre><code>要判断函数是否不止做了一件事，办法就是看是否能再拆出一个函数。函数承诺只做一件事，但还是会做其他被藏起来的事。有时，它会对自己类中的变量做出未能预期的改动。有时，它会把变量搞成向函数传递的参数或是系统全局变量。无论哪种情况，都是具有破坏性的，会导致古怪的时序性耦合及顺序依赖。函数要么做什么事，要么回答什么事，但二者不可得兼。函数应该修改某对象的状态，或是返回该对象的有关信息。两样都干常会导致混乱。</code></pre></li><li><p>无副作用。</p></li><li><p>自顶向下读代码：向下规则。</p><pre><code>我们想要让每个函数后面都跟着位于下一抽象层级的函数，这样在查看函数列表时，就能偱抽象层级向下阅读了。</code></pre></li><li><p>函数越短小、功能越集中，就越便于取个好名字。</p></li><li><p>参数应该尽量少，最理想的参数数量是零（零参数函数）。</p><pre><code>1、参数需要理解2、从测试的角度看，参数叫人为难。要编写能确保参数的各种组合运行正常的测试用例，是多么困难的事。</code></pre></li><li><p>给函数取个好名字，能较好地解释函数的意图，以及参数的顺序和意图。</p><pre><code>对于一元函数，函数和参数应当形成一种非常良好的动词/名词对形式。例如，write(name) 就相当令人认同。不管这个 name 是什么，都要被 write。</code></pre></li></ul><blockquote><p>写代码和写别的东西很像。在写论文或文章时，你先想什么就写什么，然后再打磨它。初稿也许粗陋无序，你就斟酌推敲，直至达到你心目中的样子。我写函数时，一开始都冗长而复杂。有太多缩进和嵌套循环。有过长的参数列表。名称是随意取的，也会有重复的代码。不过我会配上一套单元测试，覆盖每行丑陋的代码。然后我打磨这些代码，分解函数、修改名称、消除重复。我缩短和重新安置方法。有时我还拆散类。同时保持测试通过。最后，遵循本章列出的规则，我组装好这些函数。我并不从一开始就按照规则写函数。我想没人做得到。</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>如果你发现自己需要写注释，再想想看是否有办法翻盘，用代码来表达。每次用代码表达，你都该夸奖一下自己。每次写注释，你都该做个鬼脸，感受自己在表达能力上的失败。</p><h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><p>代码格式关乎沟通，而沟通是专业开发者的头等大事。 </p><p>这说明，应该尽力保持代码行短小。死守80个字符的上限有点僵化，而且我也并不反对代码行长度达到100个字符或120个字符。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li><p>类应该短小。</p></li><li><p>类的名称应当描述其权责。</p><pre><code>实际上，命名正是帮助判断类的长度的第一个手段。如果无法为某个类命以精确的名称，这个类大概就太长了。类名越含混，该类越有可能拥有过多权责。</code></pre></li><li><p>类只应有一个权责——只有一条修改的理由。</p><pre><code>单一权责原则（SRP）[2]认为，类或模块应有且只有一条加以修改的理由。该原则既给出了权责的定义，又是关于类的长度的指导方针。系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个权责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为。</code></pre></li></ul><p>如开放-闭合原则（OCP）：类应当对扩展开放，对修改封闭。</p><p>只要遵循以下规则，设计就能变得“简单”：</p><ul><li>运行所有测试；</li><li>不可重复；</li><li>表达了程序员的意图；</li><li>尽可能减少类和方法的数量；</li></ul><p>以上规则按其重要程度排列。</p><p>只要系统可测试，就会导向保持类短小且目的单一的设计方案。遵循SRP的类，测试起来较为简单。测试编写得越多，就越能持续走向编写较易测试的代码。所以，确保系统完全可测试能帮助我们创建更好的设计。</p><p>有了测试，就能保持代码和类的整洁，方法就是递增式地重构代码。添加了几行代码后，就要暂停，琢磨一下变化了的设计。设计退步了吗？如果是，就要清理它，并且运行测试，保证没有破坏任何东西。测试消除了对清理代码就会破坏代码的恐惧。</p><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>本质上说，重构就是「在代码写好之后改进它的设计」。</p><h3 id="重构的第一步"><a href="#重构的第一步" class="headerlink" title="重构的第一步"></a>重构的第一步</h3><p>每当要进行重构的时候，第一个步骤永远相同：我得为即将修改的代码建立一组可靠的测试环境。这些测试是必要的，因为尽管遵循重构准则可以使我避免绝大多数的 bug 引入机会，但我毕竞是人，毕竟有可能犯错。所以我需要可靠的测试。</p><p>重构技术系以微小的步伐修改程序。如果你犯下错误，很容易便可发现它。</p><h3 id="重构的节奏"><a href="#重构的节奏" class="headerlink" title="重构的节奏"></a>重构的节奏</h3><p>测试、小修改、测试、小修改、测试、小修改……。正是这种节奏让重构得以快速而安全地前进。</p><h3 id="何时重构"><a href="#何时重构" class="headerlink" title="何时重构"></a>何时重构</h3><p>三次法则<br>Don Roberts给了我一条准则：第一次做某件事时只管去做；第二次做类似的事会产生反感，但无论如何还是做了；第三次再做类似的事，你就应该重构。</p><p>Tip: 事不过三，三则重构（Three strikes and you refactor）</p><p>添加功能时一并重构</p><p>修补错误吋一并重构</p><p>复审代码吋一并重构</p><p>我们都曾经说过有朝一日再回头清理。当然，在那些日子里，我们都没听过勒布朗（LeBlanc）法则：稍后等于永不（Later equals never）。</p><p>所以，多少尊重一下你的手艺吧。花一点点时间在每个函数和类上。选用较好的名称，将大函数切分为小函数，时时照拂自己创建的东西。用心是最珍贵的资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;学习和实践过程中，如果遇到其他的内容，我会逐渐完善这篇文章。以致于写出更好的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容选自 《代码整洁之道》 和 《重构》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沃德原
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>写给自己的CSS系列（零）前言</title>
    <link href="https://hufangyun.com/2018/my-css-0/"/>
    <id>https://hufangyun.com/2018/my-css-0/</id>
    <published>2018-11-21T11:51:51.000Z</published>
    <updated>2018-11-21T11:51:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在读大神张鑫旭的《CSS世界》，收获颇多 💎 ，为了巩固学习的内容，我把学习到的知识整理成这个『写给自己的 CSS 系列』😄 。</p></blockquote><p>这个系列包含三部分内容：</p><p>1.《CSS世界》里部分内容的摘录。 🎨</p><p>2.阅读 《CSS世界》过程中，我的一些思考和相关知识的扩展。⚓ </p><p>3.之后我从其他地方学习到的相关知识，也会补充到这个系列里。 🍎</p><p>感觉之前对 CSS 理解的不够深入，遇到问题的时候总是一知半解，样式出了问题，总是用属性拼凑，云里雾中。希望之后在遇到 CSS 的问题，能够多总结，多思考。共勉之。💪</p><p>如果，文中有不对的地方，欢迎讨论，共同进步。👌</p><p>最后，推荐大家阅读 《CSS世界》。😄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在读大神张鑫旭的《CSS世界》，收获颇多 💎 ，为了巩固学习的内容，我把学习到的知识整理成这个『写给自己的 CSS 系列』😄 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个系列包含三部分内容：&lt;/p&gt;
&lt;p&gt;1.《CSS世界》里部分内容
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>写给自己的CSS系列（一）基础概念</title>
    <link href="https://hufangyun.com/2018/my-css-1-base/"/>
    <id>https://hufangyun.com/2018/my-css-1-base/</id>
    <published>2018-11-21T00:54:47.000Z</published>
    <updated>2018-11-21T00:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><h3 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h3><blockquote><p>相对长度单位又分为相对字体长度单位和相对视区长度单位。</p></blockquote><ul><li><p>相对字体长度单位，如 <code>em</code> 和 <code>ex</code>，还有 <code>CSS3</code> 新世界的 <code>rem</code> 和 <code>ch</code>(字符 0 的宽度)。</p></li><li><p>相对视区长度单位，如 <code>vh</code>、<code>vw</code>、<code>vmin</code> 和 <code>vmax</code>。 </p></li></ul><h3 id="绝对长度单位"><a href="#绝对长度单位" class="headerlink" title="绝对长度单位"></a>绝对长度单位</h3><p>最常见的就是 <code>px</code>，还有 <code>pt</code>、<code>cm</code>、<code>mm</code>、<code>pc</code> 等了解一下就可以。（在我<br>看来，它们实用性近乎零，至少我这么多年一次都没用过。– 张鑫旭 《CSS世界》）</p><h2 id="选择器和关系选择器"><a href="#选择器和关系选择器" class="headerlink" title="选择器和关系选择器"></a>选择器和关系选择器</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><blockquote><p>选择器是用来瞄准目标元素的东西</p></blockquote><ul><li><p>类选择器: 指以 <code>.</code> 这个点号开头的选择器。</p></li><li><p><code>ID</code> 选择器: <code>#</code> 打头，权重相当高。<code>ID</code> 一般指向唯一元素。但是，在 <code>CSS</code> 中，<code>ID</code><br>样式出现在多个不同的元素上并不会只渲染第一个，而是雨露均沾。但显然不推荐<br>这么做。</p></li><li><p>属性选择器: 指含有 <code>[]</code> 的选择器，形如 <code>[title]{}</code>、<code>[title= &quot;css-world&quot;]{}</code>、<br><code>[title~=&quot;css-world&quot;]{}</code> 、 <code>[title^= &quot;css-world&quot;]{}</code> 和 <code>[title$=&quot;css-world&quot;]{}</code> 等。</p></li><li><p>伪类选择器: 一般指前面有个英文冒号 <code>:</code> 的选择器，如 <code>:first-child</code> 或<code>:last-child</code> 等。</p></li><li><p>伪元素选择器: 就是有连续两个冒号的选择器，如 <code>::first-line</code>、<code>::first-letter</code>、<code>::before</code> 和 <code>::after</code>。</p></li></ul><h3 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h3><blockquote><p>关系选择器是指根据与其他元素的关系选择元素的选择器，常见的符号有空格、<code>&gt;</code>、<code>~</code>，还有 <code>+</code> 等，这些都是非常常用的选择器。</p></blockquote><ul><li><p>后代选择器: 选择所有合乎规则的后代元素。空格连接。</p></li><li><p>相邻后代选择器: 仅仅选择合乎规则的儿子元素，孙子、重孙元素忽略，因此又称“子<br>选择器”。<code>&gt;</code> 连接。适用于 <code>IE7</code> 以上版本。</p></li><li><p>兄弟选择器: 选择当前元素后面的所有合乎规则的兄弟元素。<code>~</code> 连接。适用于 <code>IE7</code> 以上版本。</p></li><li><p>相邻兄弟选择器: 仅仅选择当前元素相邻的那个合乎规则的兄弟元素。<code>+</code> 连接。适用于 <code>IE7</code> 以上版本。</p></li></ul><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p>『块级元素』对应的英文是 <code>block-level element</code>，常见的块级元素有 <code>&lt;div&gt;</code>、<code>&lt;li&gt;</code> 和 <code>&lt;table&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code>、 <code>&lt;from&gt;</code>、<code>&lt;canvas&gt;</code> 等。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements#%E5%85%83%E7%B4%A0%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">点击查看</a>所有的块级元素清单。</p><p>⚠️ 需要注意是，『块级元素』 和 <code>display</code> 为 <code>block</code> 的元素不是一个概念。例如，<code>&lt;li&gt;</code> 元素默认的 <code>display</code> 值是 <code>list-item</code>，<code>&lt;table&gt;</code> 元素默认的 <code>display</code> 值是 <code>table</code>，但是它们均是 『块级元素』，因为它们都符合块级元素的基本特征，也就是一个水平流上只能单独显示一个元素，多个块级元素则换行显示。</p><p>正是由于『块级元素』具有换行特性，因此理论上它都可以配合 <code>clear</code> 属性来清除浮动带来的影响。例如:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  display: table; // 也可以是 block，或者是 list-item</span><br><span class="line">  <span class="selector-tag">clear</span>: <span class="selector-tag">both</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>inline-block</code> 的实现方式，外在盒子负责元素是可以一行显示，还是只能换行显示;内在盒子负责宽高、内容呈现什么的。<code>width/height</code> 作用在内在盒子上。</p><p>按照 <code>display</code> 的属性值不同，值为 <code>block</code> 的元素的盒子实际由外在的 “块级盒子”和内在的“块级容器盒子”组成，值为 <code>inline-block</code> 的元素则由外在的“内联盒子”和内在的“块级容器盒子”组成，值为 <code>inline</code> 的元素则内外均是“内联盒子”。</p><h2 id="width-height"><a href="#width-height" class="headerlink" title="width/height"></a>width/height</h2><p>width 的默认值是 auto，会有以下 4种宽度表现：</p><p>(1)充分利用可用空间。比方说，<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code> 这些元素的宽度默认是 100% 于父级容器的。 像水流充满容器。</p><p>(2)收缩与包裹。典型代表就是浮动、绝对定位、inline-block 元素或 table 元素，</p><p>(3)收缩到最小。这个最容易出现在 table-layout 为 auto 的表格中</p><p>(4) 超出容器限制。除非有明确的 width 相关设置，否则上面 3 种情况尺寸都不会主动超过父级容器宽度的，但是存在一些特殊情况。例如，内容很长的连续的英文和数字，或者内联元素被设置了 <code>white-space:nowrap</code>。</p><p>一般会终止于空格(普通空格)、短横线、问号以及其他非英文字符等。例如，“display:inline-block”这几个字符以连接符“-”作为分隔符，形成了“display:inline”和“block”两个连续单元。</p><p><code>&lt;button&gt;</code> 标签按钮才会自动换行，<code>&lt;input&gt;</code> 标签按钮，默认 <code>white-space:pre</code>，是不会换行的，需要将 <code>pre</code> 值重置为默认的 <code>normal</code>。</p><h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><p>宽度是作用在 <code>content box</code> 上的，而外面围绕的 <code>padding box</code> 和 <code>border box</code> 又不是摆设。</p><p><code>box-sizing:border-box</code> 就是让 100 像素的宽度直接作用在 <code>border box</code> 上，从默认的 <code>content box</code> 变成 <code>border box</code>。</p><p>在 CSS 世界中，唯一离不开 <code>box-sizing:border-box</code> 的就是原生普通文本框 <code>&lt;input&gt;</code> 和文本域 <code>&lt;textarea&gt;</code> 的 100% 自适应父容器宽度。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">-ms-box-sizing</span>: border-box; <span class="comment">/* for IE8 */</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>box-sizing</code> 被发明出来最大的初衷应该是解决替换元素宽度自适应问题。</p><p>如果真的如我所言，那 <code>*{box-sizing:border-box}</code> 是不是没用在点儿上呢?是不是应该像下面这样 CSS 重置才更合理呢?</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">img</span>, <span class="selector-tag">video</span>, <span class="selector-tag">object</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elemente#Elements" target="_blank" rel="noopener">所有内联元素清单</a></p><h3 id="幽灵空白节点"><a href="#幽灵空白节点" class="headerlink" title="幽灵空白节点"></a>幽灵空白节点</h3><p>“幽灵空白节点”指的是在 HTML5 文档声明中，<strong>内联元素</strong>的所有解析和渲染表现就如同每个行框盒子的前面有一个“空白节点”一样。这个“空白节点”永远透明，不占据任何宽度，看不见也无法通过脚本获取，就好像幽灵一样，但又确确实实地存在，表现如同文本节点一样，因此，我称之为“幽灵空白节点”。</p><p><a href="https://www.w3.org/TR/CSS2/visudet.html#leading" target="_blank" rel="noopener">w3c 幽灵节点相关内容</a></p><p>规范里叫 <code>strut</code></p><p>⚠️ 注意，文档声明必须是 HTML5 文档声明，如果还是很多年前的老声明，则不存在“幽灵空白节点”。</p><p>我们可以举一个最简单的例子证明“幽灵空白节点”确实存在， CSS 和 HTML 代码如下:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#cd0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  display: inline-block; // 如果内联元素内什么都没有，也不会出现。所以设置了 inline-block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;长度单位&quot;&gt;&lt;a href=&quot;#长度单位&quot; class=&quot;headerlink&quot; title=&quot;长度单位&quot;&gt;&lt;/a&gt;长度单位&lt;/h2&gt;&lt;h3 id=&quot;相对长度单位&quot;&gt;&lt;a href=&quot;#相对长度单位&quot; class=&quot;headerlink&quot; title=&quot;相对长度单
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>如何修改 git 已提交的用户邮箱和用户名</title>
    <link href="https://hufangyun.com/2018/git-change-user-info/"/>
    <id>https://hufangyun.com/2018/git-change-user-info/</id>
    <published>2018-09-19T11:44:04.000Z</published>
    <updated>2018-09-19T11:44:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fh37ua0t32j30nc08caav.jpg" alt=""></p><h3 id="1、修改上一次提交的邮箱和用户名"><a href="#1、修改上一次提交的邮箱和用户名" class="headerlink" title="1、修改上一次提交的邮箱和用户名"></a>1、修改上一次提交的邮箱和用户名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend --reset-author</span><br></pre></td></tr></table></figure><h3 id="2、批量修改多次提交的邮箱和用户名"><a href="#2、批量修改多次提交的邮箱和用户名" class="headerlink" title="2、批量修改多次提交的邮箱和用户名"></a>2、批量修改多次提交的邮箱和用户名</h3><p>新建一个 <code>shell</code> 脚本 <code>changeGitInfo.sh</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter <span class="string">'</span></span><br><span class="line"><span class="string">an="$GIT_AUTHOR_NAME"</span></span><br><span class="line"><span class="string">am="$GIT_AUTHOR_EMAIL"</span></span><br><span class="line"><span class="string">cn="$GIT_COMMITTER_NAME"</span></span><br><span class="line"><span class="string">cm="$GIT_COMMITTER_EMAIL"</span></span><br><span class="line"><span class="string">if [ "$GIT_COMMITTER_EMAIL" = "这里写你原来的邮箱" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">cn="你想替换成的用户名"</span></span><br><span class="line"><span class="string">cm="你想替换成的邮箱"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ "$GIT_AUTHOR_EMAIL" = "这里写你原来的邮箱" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">an="你想替换成的用户名"</span></span><br><span class="line"><span class="string">am="你想替换成的邮箱"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">export GIT_AUTHOR_NAME="$an"</span></span><br><span class="line"><span class="string">export GIT_AUTHOR_EMAIL="$am"</span></span><br><span class="line"><span class="string">export GIT_COMMITTER_NAME="$cn"</span></span><br><span class="line"><span class="string">export GIT_COMMITTER_EMAIL="$cm"</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p>在 <code>git</code> 仓库(项目)下运行一下，该脚本即可。</p><h2 id="如果避免上面的问题？"><a href="#如果避免上面的问题？" class="headerlink" title="如果避免上面的问题？"></a>如果避免上面的问题？</h2><h3 id="分目录配置-git-用户信息"><a href="#分目录配置-git-用户信息" class="headerlink" title="分目录配置 git 用户信息"></a>分目录配置 git 用户信息</h3><p><code>git</code> 可以设置全局的用户信息，然后可以再单独为每个仓库设置用户信息。如果忘记了给项目重置用户信息，可能就会发生上面的问题 — 提交时的邮箱和用户名错了。😓</p><p>如果你喜欢用不同的目录区分个人和公司的项目，可以使用下面的方法配置自己的 <code>git</code> 用户信息。😀</p><p>比如，你把公司的项目都放在了 <code>Company</code> 目录下，个人的项目都放在了 <code>Personal</code> 目录下下面。</p><p>那你可以这么做：</p><p>在 <code>Company</code> 下新建一个 <code>.gitconfig_include</code> 文件，配置你想在该目录下给所有 <code>git</code> 仓库设置的用户信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">  name = 用户名</span><br><span class="line">  email = 邮箱</span><br></pre></td></tr></table></figure><p>然后在 <code>~/.gitconfig</code> 内添加</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[includeIf &quot;gitdir:~/Company/&quot;]</span><br><span class="line">  path = ~/Company/.gitconfig_include</span><br></pre></td></tr></table></figure><p>⚠️ 复制提醒。<code>Company</code> 要替换成你自己的目录</p><p>这样，之后 <code>Company</code> 目录下的 <code>git</code> 仓库都会使用对应的 <code>git</code> 用户信息。💪</p><p>这是 git 的一个用法，感兴趣的同学可以看这里 <a href="https://git-scm.com/docs/git-config#_conditional_includes" target="_blank" rel="noopener">conditional includes </a> </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/21307793/set-git-config-values-for-all-child-folders" target="_blank" rel="noopener">Set git config values for all child folders</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fh37ua0t32j30nc08caav.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、修改上一次提交的邮箱和用户名&quot;&gt;&lt;a href=&quot;#1、修改上一次提交的邮箱
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>ESLint 的禁用规则</title>
    <link href="https://hufangyun.com/2018/eslint-disable/"/>
    <id>https://hufangyun.com/2018/eslint-disable/</id>
    <published>2018-08-08T06:57:05.000Z</published>
    <updated>2018-08-08T06:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有些情况下，对于某些代码，我们该怎么禁用 ESLint 代码规范检查呐？</p></blockquote><p><a href="https://eslint.org/docs/user-guide/configuring.html#configuring-rules" target="_blank" rel="noopener">官方文档</a></p><h2 id="禁用方法"><a href="#禁用方法" class="headerlink" title="禁用方法"></a>禁用方法</h2><p>代码块禁用</p><p>1、禁用所有规则<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*eslint-disable */</span><br><span class="line"></span><br><span class="line">code...</span><br><span class="line"></span><br><span class="line">/*eslint-enable */</span><br></pre></td></tr></table></figure></p><p>2、禁用指定的规则</p><blockquote><p>多个规则间用逗号分隔</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*eslint-disable no-alert, no-console */</span><br><span class="line"></span><br><span class="line">code...</span><br><span class="line"></span><br><span class="line">/*eslint-enable */</span><br></pre></td></tr></table></figure><p>单行代码禁用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code... // eslint-disable-line</span><br><span class="line"></span><br><span class="line">code... // eslint-disable-line no-alert, quotes</span><br></pre></td></tr></table></figure><p>禁用下一行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code...</span><br><span class="line">// eslint-disable-next-line no-alert, quotes</span><br></pre></td></tr></table></figure></p><h2 id="禁用的规则名哪里找？"><a href="#禁用的规则名哪里找？" class="headerlink" title="禁用的规则名哪里找？"></a>禁用的规则名哪里找？</h2><p>ESLint 在终端提示的信息里就有对应的 rule-name</p><p><img src="/media/15337126571518.jpg" alt="-w493"><span class="img-alt">-w493</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;有些情况下，对于某些代码，我们该怎么禁用 ESLint 代码规范检查呐？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://eslint.org/docs/user-guide/configuring.html#confi
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>《东京一年》读书笔记</title>
    <link href="https://hufangyun.com/2018/book-a-year-in-tokyo/"/>
    <id>https://hufangyun.com/2018/book-a-year-in-tokyo/</id>
    <published>2018-07-30T13:19:59.000Z</published>
    <updated>2018-07-30T13:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>蒋方舟的<a href="https://book.douban.com/subject/27074861/" target="_blank" rel="noopener">《东京一年》</a></p><blockquote><p>“眼前苟且”与“诗和远方”是一对虚假的对立。我在东京一年的生活表面看是“诗和远方”，生活在迷人的异域，鸡毛蒜皮消失了，可东京的生活同样存在着无奈的人性、琐碎的沟通、窘迫的算计与虚伪的寒暄。另外，网络的发达让“远方”的概念消失了，我身在异国，却时刻关注着国内的人与事，为我触手而不可及的苦难感到悲伤。正是这些并不美好的细节，才构成了生活的全部。</p></blockquote><blockquote><p>她说，在30岁的时候抛下国内的一切来日本生活是她做过最正确的决定。大多数时候，我都觉得人们的这种说法是种自我保护，因为生活的沉没成本太高——那些逝去的时间、精力的投入、对别的人生选择的牺牲都无法挽救，所以只能给自己的人生选择寻找合理化的解释。但D小姐说的话我相信，相信她不是自我辩护。</p></blockquote><p>人生有很多的选择和生活方式。日复一日的上班工作不一定就是眼前的苟且，环游世界和自由职业也不一定是诗和远方。有时候工作中接到一些无聊需求时，我就在想以后成为自由职业者多好啊。每天自由支配自己的时间，开发自己的应用。但是后来和一些自由职业者交流时发现，也并没有想象中的那么美好，所有的事物都有两面性，有利有弊。最重要的是，时不时的问问内心，自己想要的是什么？</p><p>我内心想要的是什么？</p><ul><li><p>有点钱，不为钱所困。</p></li><li><p>投入一份自己喜欢的事业。</p></li><li><p>接触更多的可能性。</p></li></ul><p>用蒋方舟的话说就是: 我还是一个如此功利和虚荣的人，畏惧平稳生活带来的安逸，只能从进步里获得对自己的认可，感知到自己在活着。</p><blockquote><p>面容同老式做派的反差，真遇到爱做古体诗并高声朗读的老干部，谁还爱得起来？</p></blockquote><p>爱的是大叔的容颜和岁月带给他们的成熟与社会地位</p><blockquote><p>高浓度的青春逐渐变得稀薄，是从同伴的不断失落开始。这种失落不一定是失联，抑或是志趣道路发生变化。谈话交心往往陷入对彼此生活选择的不赞同，为了不破坏已经伤痕累累的情感联系，索性变得越来越沉默，终于相对无言。</p></blockquote><p>两种朋友</p><ul><li>渐渐的形同陌路，相处见面，成了努力的寻找话题，避免尴尬。</li><li>往日的友情，残留的温度，牵绊。</li></ul><blockquote><p>天真的人很容易世故，某种程度上，天真和世故并不是矛盾的特质，而往往出现在一个人身上的不同阶段。天真的人不懂得珍惜这个特质，而是早早地把它当作成长必然蜕掉的皮，轻率地抛弃在一边。抑或像小孩子，走一路采了一路的花，采花时也显得兴致勃勃，充满乐趣，到了路的尽头却毫不在意地把那一捧花向上一撒，扔掉，迅速变得世故。<br>而成年后还小心翼翼地呵护着自己天真一面的人，本质则是复杂的——至少是见过复杂，才知道天真有多可贵。</p></blockquote><blockquote><p>我喜欢鲁迅的一句诗：“当我沉默的时候，我觉得很充实；当我开口说话，就感到了空虚。”</p></blockquote><blockquote><p>我喜欢奥登的一首诗：“我们如何指望群星为我们燃烧？/带着那我们不能回报的激情？/如果爱不能相等/让我成为那爱得更多的一个。”</p></blockquote><p>我以前也认为小说家是靠灵感写作，没想到写作的时候比上班族还累，可能还会导致婚姻 家庭破裂</p><blockquote><p>很多人认为“自律”是自我压抑的结果，“存天理，灭人欲”，变成一个苦行僧。但其实自律不是压抑之后的被动选择，而是个体意识的主动选择。自律的人意识到自己内心的冲动和外界标准的冲突，然后开始主动调整自己。调整自己的身体也是一种控制力的练习。</p></blockquote><blockquote><p>在非正义的历史之中的每个人，都兼具受害者和施害者的双重身份。<br>《耻》写了一个让人不愿意接受的故事，像是《冰与火之歌》里说的“All Men Must Die（凡人皆死）”，只要你曾经身处一段耻辱的历史中，不管你扮演什么样的角色，你必须接受自己所有的尊严也被抹杀掉的事实。</p></blockquote><blockquote><p>那么出路是什么？</p></blockquote><blockquote><p>我总认为伟大的作品在写尽了人类已经到来和逐渐到来的苦难之后，总会提供一道窄门。就像《圣经》中耶稣说：“你们要进窄门。因为引到灭亡，那门是宽的，路是大的，进去的人也多；引到永生，那门是窄的，路是小的，找着的人也少。”<br>可库切并不是一个宗教作家，他并不把宗教救赎视为答案。他在小说中提供了一个人类自我救赎的方式：平等地对待动物。<br>在库切的几乎所有作品中，他都会提到动物的权利，他甚至写了本叫作《动物的生命》的小书。在库切看来，人们把动物划分为完全外在于自我并且低于自己的物种，是一种最深层的不平等。只要人类对动物的巧取豪夺没有结束，人类的其他不平等就不会结束，历史耻辱的循环就不会停止。</p></blockquote><blockquote><p>库切确实为小说中绝望的人们提供了解药，但这解药简直比绝望本身更让人绝望。</p></blockquote><blockquote><p>尼采说：“我们有艺术，所以我们不会因真相而死。”库切说：“南非有太多真相让艺术去把握……淹没了想象的每个角落。”</p></blockquote><blockquote><p>那我们呢？身处太多真相中的中国写作者，该如何让想象喘口气？又该如何真正摆脱耻，安居于一个真正拥有立足之地的世界呢？</p></blockquote><blockquote><p>小说的结尾，已经宣布弃教的洛特里哥的一段自述，让小说之前累积的信仰危机与苦难化作一股排山倒海的力量，击打着读者的心，那种情感的强度是我很多年不曾感受到的。洛特里哥接受了出卖他的吉次郎的忏悔，对自己说：<br>“在这个国家，我现在仍然是最后的天主教司祭。而，那个人（上帝）并非是沉默着。纵使那个人是沉默着，到今天为止，我的人生本身就在诉说着那个人。”</p></blockquote><blockquote><p>谈起创作《沉默》这本小说的初衷，远藤周作写下：“我并不关注那些光荣殉教的强者，而是将目光投向那些惧怕肉体折磨、害怕死亡、卑微怯懦、因一心拯救家族成员而放弃信仰最终踏上踏板的弱者。我要使他们重新从历史的尘埃中苏醒过来，在这个世界上昂首阔步地行走，倾听他们的声音，这只有文学家可以做到。”</p></blockquote><blockquote><p>而去年一年，每每遇到世间荒诞无常的事，我总想起《旧约·诗篇》中的一句诗：“我们经过的日子都在你的震怒之下/我们度尽的年岁好像一声叹息。”<br>——是无助吧，希冀一个更大的力量在目睹这世上发生的一切，即便他决计不施以援手，但他心中有数。</p></blockquote><p>无力改变现实的无助，使人们将希望寄托于神。想让神做出判决，让正义战胜邪恶😈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;蒋方舟的&lt;a href=&quot;https://book.douban.com/subject/27074861/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《东京一年》&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“眼前苟且”与“诗和远方”是一对虚假的
      
    
    </summary>
    
      <category term="读书" scheme="https://hufangyun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>我的技术书单</title>
    <link href="https://hufangyun.com/2018/book-tech-my/"/>
    <id>https://hufangyun.com/2018/book-tech-my/</id>
    <published>2018-07-05T02:49:18.000Z</published>
    <updated>2018-07-05T02:49:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🙉 是左耳朵耗子（陈皓） 推荐的书籍<br>📖 是在读的书籍<br>📕 是已读的书籍</p></blockquote><h3 id="专业基础"><a href="#专业基础" class="headerlink" title="专业基础"></a>专业基础</h3><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>算法图解 🙉 📖</p><p>算法 🙉</p><p>算法导论 🙉</p><p>编程珠玑 🙉</p><p>数据结构与算法分析 🙉</p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>数据库系统概念 🙉</p><p>现代操作系统 🙉</p><p>计算机网络 🙉 📖</p><p>计算机程序的构造和解释 🙉</p><p>编译原理 🙉</p><p>深入理解计算机系统 🙉</p><p>Wireshark 数据包分析实战 🙉</p><p>Unix 高级环境编程 🙉</p><p>Unix 网络编程 第 1 卷 套接口 API 、第 2 卷 进程间通信 🙉</p><p>TCP/IP 详解 卷 I 协议 🙉</p><blockquote><p>如果上面的三本看不懂，可以先看是下面的三本</p></blockquote><p>Linux C 编程一站式学习 🙉</p><p>TCP/IP 网络编程 🙉</p><p>图解 TCP/IP 🙉</p><p>The TCP/IP Guide 🙉</p><h3 id="程序员修养"><a href="#程序员修养" class="headerlink" title="程序员修养"></a>程序员修养</h3><p>重构 改善既有代码的设计 🙉 📕</p><p>修改代码的艺术 🙉</p><p>代码整洁之道 🙉 📕</p><p>程序员的职业素养 🙉</p><p>程序员的思维修炼 📕</p><h3 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h3><h4 id="CSS-类"><a href="#CSS-类" class="headerlink" title="CSS 类"></a>CSS 类</h4><p>CSS世界 📖</p><p>CSS实战手册（第四版）8.4</p><p>CSS权威指南（第三版）8.5</p><p>精通CSS（第2版）8.7</p><h4 id="JavaScript-类"><a href="#JavaScript-类" class="headerlink" title="JavaScript 类"></a>JavaScript 类</h4><p>JavaScript DOM 编程艺术（第二版）</p><p>JavsScript高级程序设计</p><p>编写可维护的JavaScript</p><p>高性能网站建设指南</p><p>深入浅出 React 和 Redux 📖</p><p>你不知道的JavaScript</p><p>ECMAScript 6入门(全彩)</p><p>JavaScript语言精粹</p><p>JavaScript权威指南</p><p>高性能JavaScript</p><p>JavaScript设计模式</p><p>Effective JavaScript:编写高质量JavaScript代码的68个有<br>效方法</p><p>JavaScript框架设计</p><h3 id="UI交互"><a href="#UI交互" class="headerlink" title="UI交互"></a>UI交互</h3><p>写给大家看的设计书 📖</p><p>30天学会绘画</p><p>文字设计的原理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;🙉 是左耳朵耗子（陈皓） 推荐的书籍&lt;br&gt;📖 是在读的书籍&lt;br&gt;📕 是已读的书籍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;专业基础&quot;&gt;&lt;a href=&quot;#专业基础&quot; class=&quot;headerlink&quot; title=&quot;专业基础
      
    
    </summary>
    
      <category term="读书" scheme="https://hufangyun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>从哪里了解 Google Chrome 升级的新特性</title>
    <link href="https://hufangyun.com/2018/chrome-update-know/"/>
    <id>https://hufangyun.com/2018/chrome-update-know/</id>
    <published>2018-06-26T11:36:25.000Z</published>
    <updated>2018-06-26T11:36:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Google-Chrome-canary-dev-beta-stable-4-个版本的区别"><a href="#Google-Chrome-canary-dev-beta-stable-4-个版本的区别" class="headerlink" title="Google Chrome canary dev beta stable 4 个版本的区别"></a>Google Chrome canary dev beta stable 4 个版本的区别</h2><p><strong> 开发流程是这样的 </strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canary -&gt; dev -&gt; beta -&gt; stable</span><br></pre></td></tr></table></figure><p><img src="/media/ustream-techtalks-google-chrome-developer-tools-5-638.jpg" alt="ustream-techtalks-google-chrome-developer-tools-5-638"><span class="img-alt">ustream-techtalks-google-chrome-developer-tools-5-638</span></p><p><code>canary</code> 是最激进的，几乎每天都更新。</p><p><code>stable</code> 是稳定版，是面向普通用户，平均六个月更新一次</p><p><code>canary</code> 和 <code>stable</code> 会相差 2 个左右的版本。比如 <code>stable</code> 版本现在（2018年6月26日）是 67，<code>canary</code> 现在是 69。</p><p><img src="/media/C12Q3aEWgAAwhBE.jpg" alt="C12Q3aEWgAAwhBE"><span class="img-alt">C12Q3aEWgAAwhBE</span></p><h2 id="Chromium-和-Chrome-的区别"><a href="#Chromium-和-Chrome-的区别" class="headerlink" title="Chromium 和 Chrome 的区别"></a>Chromium 和 Chrome 的区别</h2><ul><li><p><code>Chromium</code> 是一个开源的浏览器。 </p></li><li><p><code>Chrome</code> 是基于 <code>Chromium</code> 而来。</p></li><li><p><code>Chromium</code> 更新速度和 <code>canary</code> 是一致的。</p></li><li><p><code>Chromium</code> 作为一个开源项目去掉了一些不开源的东西，比如 <code>Google</code> 的标识和 <code>flash</code> 插件等等。 </p></li></ul><h2 id="从哪里可以看到-Chrome-的更新"><a href="#从哪里可以看到-Chrome-的更新" class="headerlink" title="从哪里可以看到 Chrome 的更新"></a>从哪里可以看到 Chrome 的更新</h2><h3 id="Canary-版"><a href="#Canary-版" class="headerlink" title="Canary 版"></a>Canary 版</h3><p><code>Canary</code> 版 几乎每天都更新，但是没有更新日志。只能通过源码的提交记录查看。<a href="https://chromium.googlesource.com/chromium/src/" target="_blank" rel="noopener">项目地址</a></p><p>然后找到 <code>tags</code> 比如 [<code>69.0.3473.1</code>]</p><p>新页面里点击 <code>log</code> 即可查看每次的提交</p><h2 id="Dev-版"><a href="#Dev-版" class="headerlink" title="Dev 版"></a>Dev 版</h2><p><a href="https://blog.chromium.org/" target="_blank" rel="noopener">https://blog.chromium.org/</a></p><h2 id="Stable-版"><a href="#Stable-版" class="headerlink" title="Stable 版"></a>Stable 版</h2><p><a href="https://chromereleases.googleblog.com/" target="_blank" rel="noopener">https://chromereleases.googleblog.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Google-Chrome-canary-dev-beta-stable-4-个版本的区别&quot;&gt;&lt;a href=&quot;#Google-Chrome-canary-dev-beta-stable-4-个版本的区别&quot; class=&quot;headerlink&quot; title=&quot;Go
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>提升效率的小工具分享</title>
    <link href="https://hufangyun.com/2018/efficient-small-tools/"/>
    <id>https://hufangyun.com/2018/efficient-small-tools/</id>
    <published>2018-06-18T23:17:41.000Z</published>
    <updated>2018-06-18T23:17:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>哈哈 😝 ，碰到好的工具总是忍不住要和大家分享一下</p></blockquote><p> git-open</p><blockquote><p><code>zsh</code> 插件。在终端快速打开 <code>git</code> 项目主页。 详情请看<a href="https://hufangyun.com/2017/zsh-plugin/">这篇博文</a></p></blockquote><p> gitlab</p><blockquote><p>Alfred workflow gitlab 插件。快速打开 项目地址。<a href="https://github.com/lukewaite/alfred-gitlab" target="_blank" rel="noopener">下载地址</a></p></blockquote><p> chrome 的 device</p><blockquote><p>chrome 设置 <code>UA</code> 模拟设备。 可以设置在微信环境内、iOS app 内。</p></blockquote><p> dash</p><blockquote><p>代码片段功能</p></blockquote><p> trash</p><blockquote><p>删除文件到系统的垃圾桶。防止 <code>rm</code> 错删文件，无法找回 <a href="https://github.com/sindresorhus/trash" target="_blank" rel="noopener">trash 官网</a></p></blockquote><p> onetab</p><blockquote><p>chrome 插件 暂存打开的标签页</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;哈哈 😝 ，碰到好的工具总是忍不住要和大家分享一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; git-open&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;zsh&lt;/code&gt; 插件。在终端快速打开 &lt;code&gt;git&lt;/code&gt; 项
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>几个不错的 App 设计网站</title>
    <link href="https://hufangyun.com/2018/ui-design-get/"/>
    <id>https://hufangyun.com/2018/ui-design-get/</id>
    <published>2018-06-14T11:13:39.000Z</published>
    <updated>2018-06-30T16:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://hufangyun.com">小猿大圣</a>的 UI 学习自留地</p></blockquote><h2 id="sketchappsources"><a href="#sketchappsources" class="headerlink" title="sketchappsources"></a>sketchappsources</h2><p><a href="https://www.sketchappsources.com/" target="_blank" rel="noopener">https://www.sketchappsources.com/</a></p><p><img src="/media/15289473088372.jpg" alt=""></p><h2 id="dribbble"><a href="#dribbble" class="headerlink" title="dribbble"></a>dribbble</h2><p><a href="https://dribbble.com/" target="_blank" rel="noopener">https://dribbble.com/</a></p><p><img src="/media/15289473603818.jpg" alt=""></p><h2 id="sketchrepo"><a href="#sketchrepo" class="headerlink" title="sketchrepo"></a>sketchrepo</h2><p><a href="https://sketchrepo.com/" target="_blank" rel="noopener">https://sketchrepo.com/</a></p><p><img src="/media/15289475696821.jpg" alt=""></p><h2 id="uipixels"><a href="#uipixels" class="headerlink" title="uipixels"></a>uipixels</h2><p><a href="http://www.uipixels.com/" target="_blank" rel="noopener">http://www.uipixels.com/</a></p><p><img src="/media/15289475478955.jpg" alt=""></p><h2 id="UI-中国"><a href="#UI-中国" class="headerlink" title="UI 中国"></a>UI 中国</h2><p><a href="http://www.ui.cn/" target="_blank" rel="noopener">http://www.ui.cn/</a></p><h2 id="uplabs"><a href="#uplabs" class="headerlink" title="uplabs"></a>uplabs</h2><p><a href="https://www.uplabs.com/" target="_blank" rel="noopener">https://www.uplabs.com/</a></p><p><img src="/media/15289481019068.jpg" alt=""></p><h2 id="unsplash"><a href="#unsplash" class="headerlink" title="unsplash"></a>unsplash</h2><blockquote><p>图片</p></blockquote><p><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></p><h2 id="sketchactive"><a href="#sketchactive" class="headerlink" title="sketchactive"></a>sketchactive</h2><blockquote><p>图标</p></blockquote><p><a href="http://aegeank.com/sketchactive/" target="_blank" rel="noopener">http://aegeank.com/sketchactive/</a></p><p><img src="/media/15289474299421.jpg" alt=""></p><h2 id="创造狮"><a href="#创造狮" class="headerlink" title="创造狮"></a>创造狮</h2><blockquote><p>导航</p></blockquote><p><a href="http://chuangzaoshi.com/" target="_blank" rel="noopener">http://chuangzaoshi.com/</a></p><p><img src="/media/15289478996799.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hufangyun.com&quot;&gt;小猿大圣&lt;/a&gt;的 UI 学习自留地&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;sketchappsources&quot;&gt;&lt;a href=&quot;#sketchappsources&quot; c
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库设计入门指南与学习笔记</title>
    <link href="https://hufangyun.com/2018/database-sql-design/"/>
    <id>https://hufangyun.com/2018/database-sql-design/</id>
    <published>2018-06-13T16:55:00.000Z</published>
    <updated>2018-08-08T16:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要记载我学习数据库设计过程中使用的学习资料和对相关知识的理解</p></blockquote><h2 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h2><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><a href="https://www.imooc.com/video/1903" target="_blank" rel="noopener">慕课网的免费视频</a> 数据库设计那些事</p><blockquote><p><a href="https://coolshell.cn/haoel" target="_blank" rel="noopener">陈皓</a>在『左耳听风』专栏之程序员练级攻略（2018）里推荐的数据库入门资料</p></blockquote><h3 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h3><h4 id="什么是数据库设计？"><a href="#什么是数据库设计？" class="headerlink" title="什么是数据库设计？"></a>什么是数据库设计？</h4><p>根据<strong>业务需求</strong>，建立可以进行<strong>高效访问</strong>和<strong>高效存储</strong>的数据存储模型。（我自己的理解，不是定义哈 😂）</p><p>1、业务需求</p><p>2、高效的访问</p><p>3、高效的存储</p><h4 id="好的数据库设计是怎样的"><a href="#好的数据库设计是怎样的" class="headerlink" title="好的数据库设计是怎样的"></a>好的数据库设计是怎样的</h4><p>1、减少数据冗余 （相同的数据在多个地方存在）</p><p>2、避免数据维护异常（插入、更新、删除异常）</p><p>3、节约存储空间（省钱 💰）</p><p>4、高效的访问</p><h4 id="数据库设计的过程"><a href="#数据库设计的过程" class="headerlink" title="数据库设计的过程"></a>数据库设计的过程</h4><p>1、功能模块划分</p><p>2、分析各个模块的数据包括的那些属性、那些是可选的唯一标识</p><p>3、分析实体间的关系 1对1 1对多 多对多</p><p>4、使用ER图展示2、3步</p><p>5、分析数据的生命周期。永久存储（分表、分库）还是归档存储还是不归档存储（定期清理）</p><h4 id="使用ER图展示数据关系"><a href="#使用ER图展示数据关系" class="headerlink" title="使用ER图展示数据关系"></a>使用ER图展示数据关系</h4><p><img src="/media/15293168268240.jpg" alt=""></p><p><img src="/media/15293168822924.jpg" alt=""></p><h4 id="设计范式"><a href="#设计范式" class="headerlink" title="设计范式"></a>设计范式</h4><p>第一范式：字段是单一属性，不可再分，二维表。</p><p><img src="/media/15293255381312.jpg" alt=""></p><p>第二范式：供应商名称和商品名称放在一起，组合关键字，不要出现。</p><p><img src="/media/15293255732513.jpg" alt=""></p><p>第三范式：商品名称 -&gt; 分类名 -&gt; 分类描述 共存。</p><p><img src="/media/15293257830389.jpg" alt=""></p><p><img src="/media/15293256812047.jpg" alt=""></p><p>BC范式</p><p><img src="/media/15293258992402.jpg" alt=""></p><h4 id="字段类型的选择"><a href="#字段类型的选择" class="headerlink" title="字段类型的选择"></a>字段类型的选择</h4><p>1、当一个字段有多个类型可以选择的时候，优先选择数字类型、其次是日期和二进制，最后是字符类型。</p><p>2、如果列中要存储的数据长度差不多是一致的或者最大数据长度小于<code>50byte</code>优先使用 <code>char</code> 类型</p><p>3、<strong>char 与 varchar 的区别</strong></p><p>varchar 不固定长度，节省空间。</p><p>char 固定长度，但是储存快。</p><p><img src="/media/15293267820612.jpg" alt=""></p><p>4、主键的字段类型所占的空间要尽可能的小。</p><p>5、避免使用外键约束，会增加维护成本，但是在相关联的列上一定要建立索引</p><h4 id="维护和优化"><a href="#维护和优化" class="headerlink" title="维护和优化"></a>维护和优化</h4><p><img src="/media/15293275139331.jpg" alt=""></p><p><img src="/media/15293276627730.jpg" alt=""></p><p><img src="/media/15293278075195.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要记载我学习数据库设计过程中使用的学习资料和对相关知识的理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;入门篇&quot;&gt;&lt;a href=&quot;#入门篇&quot; class=&quot;headerlink&quot; title=&quot;入门篇&quot;&gt;&lt;/a&gt;入门篇&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>SMART目标成长法</title>
    <link href="https://hufangyun.com/2018/smart-goal/"/>
    <id>https://hufangyun.com/2018/smart-goal/</id>
    <published>2018-05-13T04:26:49.000Z</published>
    <updated>2018-05-13T04:26:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言-🔗"><a href="#前言-🔗" class="headerlink" title="前言 🔗"></a>前言 🔗</h2><blockquote><p>目标是很美好的事情，你可能会有许多目标：减肥🏃‍♂️、找到一个更好的工作👔、搬进一个更大的房子🏡（或者更小的房子）、写本小说、学习演奏电吉他🎸、编写一个超级 <code>Rails</code> 应用程序或者完全掌握 <code>Erlang</code>。</p></blockquote><blockquote><p>但是很多目标都是一个模式——崇高的、泛泛的“我希望在某某方面更好”。减肥就是一个最好的例子🌰。</p></blockquote><blockquote><p>大多数人想要更苗条🧜‍♀️（特别是我们这些长时间坐在电脑前的人）。<br>但“我想要苗条”并不是一个非常明确的目标（虽然可能是一个很好的愿景——长期、理想的状态）。</p></blockquote><blockquote><p>你体重需要减多少斤？你仰卧举重准备练多少公斤的？何时完成？你准备控制热量还是增加锻炼？⚽️</p></blockquote><blockquote><p>类似地，说你想“学习 <code>Erlang</code> 是不错，但是这到底是什么意思？想要学到什么程度？想用它来做什么？如何开始？<br>为了帮助你专注于自己的目标，能够更好地实现它，请允许我推荐一种风靡一时的来自于咨询领域的诀窍：使用 <code>SMART</code> 方法实现你的目标。🥇</p></blockquote><p><img src="/media/20160621110804644.png" alt="20160621110804644"><span class="img-alt">20160621110804644</span></p><blockquote><p>图片取自 Google Image</p></blockquote><h2 id="什么是-SMART-💪"><a href="#什么是-SMART-💪" class="headerlink" title="什么是 SMART 💪"></a>什么是 <code>SMART</code> 💪</h2><p><strong><code>SMART</code> 代表具体的、可度量的、可实现的、相关的和时间可控的（Specific, Measurable, Achievable, Relevant, and Time-boxed）</strong></p><h3 id="具体的-✅"><a href="#具体的-✅" class="headerlink" title="具体的 ✅"></a>具体的 ✅</h3><p>首先，一个目标任务应该是具体的。也就是说，只说 “我想学习Erlang” 是不够的。应该把事情具体化，例如“我想要用Erlang编写一个可以动态生成内容的Web服务器”。</p><h3 id="可度量的-⏰"><a href="#可度量的-⏰" class="headerlink" title="可度量的 ⏰"></a>可度量的 ⏰</h3><p>如何知道你何时完成？这一直是我最喜欢问的一个问题。为了努力实现目标任务，不管采用什么方法，你必须能够度量它。</p><p>但是一定要采取稳扎稳打、步步为营的过程。你不能期望一周之内减掉五十英镑或者利用一个周末就学会一门全新的编程语言和它的全部函数库。度量你的目标任务，但是要采取增量进步的方法。👣</p><p>你不必看清你去往何处。不必看清你的目的地和沿途的一切。你只需要看清面前的一两米即可。 </p><h3 id="可实现的👍"><a href="#可实现的👍" class="headerlink" title="可实现的👍"></a>可实现的👍</h3><p>我想要攀登K2峰，想在中东建立永久和平。这一切不会发生。😂</p><p>至少，对我来说是这样。这些都是很好的目标，但是不现实。对我来说在当前的现实情况下无法实现。🤪</p><p>因此，先确定目标是否合理。你也许可以在下周用新语言编写一段 “Hello,World!” 或者一个简单应用，但是你可能无法编写一个完整的Web应用框架和一个带有神经网络优化算法的用户界面构造器。</p><p>从你现在所处的情况着眼，让每一个目标都可实现。🚀</p><h3 id="相关的🔗"><a href="#相关的🔗" class="headerlink" title="相关的🔗"></a>相关的🔗</h3><p>这个目标真的与你有关吗——对你重要吗？🏆你对此有热情吗？是在你控制之下的事情吗？<br>如果不是，这个目标就是不相关的。<br>目标需要相关，需要在你掌控之中🎉。</p><h3 id="时间可控的🕰"><a href="#时间可控的🕰" class="headerlink" title="时间可控的🕰"></a>时间可控的🕰</h3><p>这意味着你需要设定一个最后期限⏱。没有期限，目标会逐步衰退，永远被每天更紧急的事情所排挤。这样它永远都不会实现🥊。</p><p><strong>再强调一遍，稳扎稳打。采取循序渐进、比较细小的里程碑。当实现它们后，你会更有动力去实现下一个里程碑。</strong></p><h2 id="建立SMART任务实现你的目标。⌛️"><a href="#建立SMART任务实现你的目标。⌛️" class="headerlink" title="建立SMART任务实现你的目标。⌛️"></a>建立SMART任务实现你的目标。⌛️</h2><p>这种方法帮助你从自己的角度😀（“我”）、从更积极的角度（“我要”）😘来明确目标，要么用一般现在时，要么给出明确的时间表述（“我会💪在xx时间之前完成zyzzy”）。</p><h2 id="更大背景下的目标🚀"><a href="#更大背景下的目标🚀" class="headerlink" title="更大背景下的目标🚀"></a>更大背景下的目标🚀</h2><p>设定目标是第一步。</p><p>下一步行动是创建小任务以帮助你每天或每隔一段时间都能达到某种程度。你创建的小任务越多，你就越容易看清自己与目标的距离。</p><blockquote><p>本文大部分内容由小猿大圣摘录自 《程序员的思维修炼:开发认知潜能的九堂课 (图灵程序设计丛书)》</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言-🔗&quot;&gt;&lt;a href=&quot;#前言-🔗&quot; class=&quot;headerlink&quot; title=&quot;前言 🔗&quot;&gt;&lt;/a&gt;前言 🔗&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;目标是很美好的事情，你可能会有许多目标：减肥🏃‍♂️、找到一个更好的工作👔、搬进一个更
      
    
    </summary>
    
      <category term="读书" scheme="https://hufangyun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>新手到专家的五个阶段</title>
    <link href="https://hufangyun.com/2018/novice-to-expert-five-stage/"/>
    <id>https://hufangyun.com/2018/novice-to-expert-five-stage/</id>
    <published>2018-05-06T10:48:06.000Z</published>
    <updated>2018-05-06T10:48:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《程序员的思维修炼:开发认知潜能的九堂课 (图灵程序设计丛书)》读书笔记 </p></blockquote><h2 id="德雷福斯模型的5个阶段"><a href="#德雷福斯模型的5个阶段" class="headerlink" title="德雷福斯模型的5个阶段"></a>德雷福斯模型的5个阶段</h2><p><img src="/media/15256037912881.png" alt=""></p><h2 id="有效的使用德雷福斯模型"><a href="#有效的使用德雷福斯模型" class="headerlink" title="有效的使用德雷福斯模型"></a>有效的使用德雷福斯模型</h2><ul><li>需要一个明确定义的任务。 ⏱</li><li>任务需要有适当难度——有挑战性但可行。⏰</li><li>任务环境可以提供大量反馈，以便于你采取行动。🛠</li><li>提供重复犯错和纠正错误的机会。稳步做这种实践十年，你就会达到目标。💯</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;《程序员的思维修炼:开发认知潜能的九堂课 (图灵程序设计丛书)》读书笔记 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;德雷福斯模型的5个阶段&quot;&gt;&lt;a href=&quot;#德雷福斯模型的5个阶段&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="技术成长" scheme="https://hufangyun.com/categories/%E6%8A%80%E6%9C%AF%E6%88%90%E9%95%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>关于转载</title>
    <link href="https://hufangyun.com/2018/copyright-reprinted/"/>
    <id>https://hufangyun.com/2018/copyright-reprinted/</id>
    <published>2018-04-26T08:52:30.000Z</published>
    <updated>2018-04-27T08:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，发现自己写的博文，被别人转载了。有商业性质的网站、有个人博主，也有各种爬虫自动采集收录。</p><p>比如这篇 <a href="https://hufangyun.com/2017/short-url/">短网址(short URL)系统的原理及其实现</a>, 我发现这篇文章在谷歌和百度搜索的时候，前5、6页搜索结果都找不到我自己的原文地址😭，只有必应第一条搜索结果是我自己的博客 😂</p><h2 id="我不希望文章被复制粘贴转载-❌"><a href="#我不希望文章被复制粘贴转载-❌" class="headerlink" title="我不希望文章被复制粘贴转载 ❌"></a>我不希望文章被复制粘贴转载 ❌</h2><ul><li><strong>我的博客是经常更新的。</strong> 🚀 我的博文是按照更新时间排序的，在编程技术领域以及社会这个大家庭中，我还很年轻，写的东西难免会有错误，或者认知上的不成熟，一旦我发现有错误或者内容补充，我会不定期的更新文章内容。但是复制粘贴转载的文章，并不会随着我更新而更新，错误的内容会一直保留，给之后的阅读者留下隐患。</li><li><strong>我不能更好的收到反馈。</strong> 我发现很多转载的文章下面，有对我文章内容的疑问和勘误，转载文章的人，并不会去解释这些疑问，而我作为文章的原创作者，也收不到别人指正的错误。对文章的阅读者和作者的我，都没有很好的反馈。</li><li><strong>阅读效果不佳。</strong> 最让我受不了的是，我在写作的时候使用了 <code>Markdown</code> 的语法画的流程图很多网站不支持显示，显示的全是代码。还有我用的表情 🐻，他们也显示不出来。。。。</li></ul><h2 id="我希望的转载方式-✅"><a href="#我希望的转载方式-✅" class="headerlink" title="我希望的转载方式 ✅"></a>我希望的转载方式 ✅</h2><p><strong>分享链接转载，指向我的博文。</strong> 我觉的这是最好的转载方式，互赢。</p><p><strong>如果，</strong> 非要复制粘贴的转载，请联系我 <strong>获得授权</strong>，未经许可禁止转载。</p><p>我会在文章的开头注明授权给了谁。我文章更新的时候，也通知转载文章的地方更新。</p><p>邮箱地址：<code>hufy78#gmail.com</code> <code>hufy3651#foxmail.com</code> <code>#</code> 换成 <code>@</code></p><h2 id="关于原创自己总结的方法"><a href="#关于原创自己总结的方法" class="headerlink" title="关于原创自己总结的方法"></a>关于原创自己总结的方法</h2><p>1、有自己的文章风格。这个好像很难。。。</p><p>2、有代码实例，指向自己的网站、Github</p><p>3、图片截图包含自己的博客域名目录等</p><p>4、截图带上自己的水印</p><p>5、每篇文章后面带上转载声明</p><p>6、文章内容示例含有自己的标识</p><h2 id="使用别人的原创"><a href="#使用别人的原创" class="headerlink" title="使用别人的原创"></a>使用别人的原创</h2><p>换位思考，以后我使用别人的图片和摘选的内容时，我会带上来源地址和作者署名，尊重原创。💪</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近，发现自己写的博文，被别人转载了。有商业性质的网站、有个人博主，也有各种爬虫自动采集收录。&lt;/p&gt;
&lt;p&gt;比如这篇 &lt;a href=&quot;https://hufangyun.com/2017/short-url/&quot;&gt;短网址(short URL)系统的原理及其实现&lt;/a&gt;, 
      
    
    </summary>
    
      <category term="随笔" scheme="https://hufangyun.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>效率神器 Alfred workflow 插件推荐</title>
    <link href="https://hufangyun.com/2018/alfred-workflow-recommend/"/>
    <id>https://hufangyun.com/2018/alfred-workflow-recommend/</id>
    <published>2018-04-19T16:38:07.000Z</published>
    <updated>2018-11-18T23:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<img alt="alfred" src="https://static.hufangyun.com/hexo/img/alfred.png?imageView2/2/w/750"><span class="img-alt">alfred</span><blockquote><p>以下是我常用的 Alfred workflow</p></blockquote><p>⚠️ 不同插件，可能有不同作者开发的版本，我推荐的不一定是最好的，只是我一直在用的。比如像有道翻译，可以找到很多版本，选择自己喜欢的即可。</p><blockquote><p>新发现的插件，会添加在最上面的 🎉</p></blockquote><img alt="自用 Alfred Workfolw" src="https://static.hufangyun.com/hexo/img/my-alfred-workflow.png?imageView2/2/w/300"><span class="img-alt">自用 Alfred Workfolw</span><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="快递查询"><a href="#快递查询" class="headerlink" title="快递查询"></a>快递查询</h3><blockquote><p>在 <code>Alfred</code> 中查询快递，使用 <code>kd</code> 关键字，可以记录已经查过的快递和查询新快递，不需要输入快递公司名称。</p></blockquote><img alt="快递查询" src="https://static.hufangyun.com/hexo/img/alfred-express.jpg?imageView2/2/w/500"><span class="img-alt">快递查询</span><p><a href="https://github.com/roylez/alfred_kuaidi" target="_blank" rel="noopener">下载地址</a></p><h3 id="锁定屏幕"><a href="#锁定屏幕" class="headerlink" title="锁定屏幕"></a>锁定屏幕</h3><p>最近同事介绍的，是 <code>alfred</code> 自带的功能，不需要付费即可使用。</p><img src="https://static.hufangyun.com/hexo/img/alfred-lock.jpg?imageView2/2/w/500"><h3 id="http-status-code"><a href="#http-status-code" class="headerlink" title="http status code"></a>http status code</h3><blockquote><p>显示 http 状态码含义</p></blockquote><p>第一款 <a href="https://github.com/JoelQ/alfred-http" target="_blank" rel="noopener">下载地址</a></p><p>第二款 <a href="https://github.com/Dreamseer/alfred-http" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-http.jpg?imageView2/2/w/500"><h3 id="codeVar"><a href="#codeVar" class="headerlink" title="codeVar"></a>codeVar</h3><blockquote><p>生成变量名<br>作为一名开发者，我超级 😍 这款 workflow</p></blockquote><p>支持大小驼峰、常量、下划线</p><p><a href="https://github.com/xudaolong/CodeVar" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-var.jpg?imageView2/2/w/500"><h3 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h3><blockquote><p>颜色转换工具</p></blockquote><p>⚠️ 需要安装 <code>node.js</code> 环境</p><p><a href="https://github.com/TylerEich/Alfred-Extras/releases" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-color.jpg?imageView2/2/w/500"><h3 id="Currency-Convert"><a href="#Currency-Convert" class="headerlink" title="Currency Convert"></a>Currency Convert</h3><blockquote><p>汇率转换</p></blockquote><p><a href="https://github.com/jin5354/alfred3-workflow-CurrencyConvert" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-currency.jpg?imageView2/2/w/500"><h3 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h3><blockquote><p>和 macOS 上的 Dash 软件配合使用，文档搜索</p></blockquote><p>就不上截图了。</p><p><a href="https://github.com/Kapeli/Dash-Alfred-Workflow" target="_blank" rel="noopener">下载地址</a></p><h3 id="豆瓣"><a href="#豆瓣" class="headerlink" title="豆瓣"></a>豆瓣</h3><blockquote><p>搜索豆瓣的书籍、电影、音乐，查看评分，打开相关的页面</p></blockquote><p>第一款 <a href="https://lucifr.com/2013/03/14/douban-workflow-for-alfred-v2/" target="_blank" rel="noopener">下载地址</a></p><p>作者个人的 apiKey 失效了，在 workflow 中，去掉 apiKey 即可使用了。</p><img src="https://static.hufangyun.com/hexo/img/alfred-douban-book.jpg?imageView2/2/w/500"><img src="https://static.hufangyun.com/hexo/img/alfred-douban-moive.jpg?imageView2/2/w/500"><p>第二款 <a href="https://github.com/xinhangliu/alfred-workflow/tree/master/douban-search" target="_blank" rel="noopener">下载地址</a></p><p>😄 还支持搜索用户~~</p><img src="https://static.hufangyun.com/hexo/img/alfred-douban-search.png?imageView2/2/w/500"><p>第三款 <a href="https://github.com/swim2sun/Douban-Movie-Workflow" target="_blank" rel="noopener">下载地址</a></p><p>❗这一款，仅支持豆瓣电影</p><img src="https://static.hufangyun.com/hexo/img/alfred-douban-movie.png?imageView2/2/w/500"><h3 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a>emoji</h3><blockquote><p>搜索表情</p></blockquote><p>第一款</p><ul><li>常用的表情会放在最上面，但是使用的关键词匹配，经常搜不出自己想要的表情</li><li>好处是开箱即用，而下面一款，需要安装 <code>node.js</code> 环境。</li></ul><p><a href="https://github.com/carlosgaldino/alfred-emoji-workflow" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-emoji.jpg?imageView2/2/w/500"><p>第二款</p><ul><li>搜索结果会把相关的表情都展示出来，不只是关键词匹配。</li><li><code>node.js</code> 开发的，需要安装一些必要的环境。</li></ul><p>[下载地址](<a href="https://github.com/sindresorhus/alfred-emoj）" target="_blank" rel="noopener">https://github.com/sindresorhus/alfred-emoj）</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-emoji-npm.jpg?imageView2/2/w/500"><h3 id="Encode-Decode"><a href="#Encode-Decode" class="headerlink" title="Encode/Decode"></a>Encode/Decode</h3><blockquote><p>编码解码工具</p></blockquote><p><a href="https://github.com/willfarrell/alfred-encode-decode-workflow" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-encode.jpg?imageView2/2/w/500"><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><blockquote><p>快速查找项目、用户</p></blockquote><p><a href="https://github.com/gharlan/alfred-github-workflow" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-github.jpg?imageView2/2/w/500"><h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><blockquote><p>快速搜索并打开项目，支持自定义域名的 gitlab</p></blockquote><p><a href="https://github.com/lukewaite/alfred-gitlab" target="_blank" rel="noopener">下载地址</a></p><p>默认配置的是 <a href="https://gitlab.com/explore" target="_blank" rel="noopener"><code>gitlab</code></a>, 也可以设置公司的 <code>gitlab</code></p><p>输入 <code>glseturl</code> 空格后，输入地址。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//&lt;host&gt;/api/v4/projects</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// host 换成自己公司的</span></span><br></pre></td></tr></table></figure><img src="https://static.hufangyun.com/hexo/img/alfred-gitlab.jpg?imageView2/2/w/500"><h3 id="nameBeta"><a href="#nameBeta" class="headerlink" title="nameBeta"></a>nameBeta</h3><blockquote><p>基于 namebata.com 的查询域名是否注册的工具<br>我自己写的，developing</p></blockquote><p><a href="https://github.com/Youthink/alfred-namebeta-workflow" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-namebeta.jpg?imageView2/2/w/500"><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><blockquote><p>搜索 npm 包</p></blockquote><p><a href="https://github.com/onvno/alfred-package-workflow" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-node.jpg?imageView2/2/w/500"><h3 id="Package-Managers"><a href="#Package-Managers" class="headerlink" title="Package Managers"></a>Package Managers</h3><blockquote><p>上面的插件只能搜索 npm 包，这个就强大了 <code>yarn</code> <code>npm</code> <code>yo</code> <code>brew</code> <code>apt-get</code> <code>composer</code> <code>docker</code> <code>gems</code> <code>gradle</code> <code>hex</code> <code>maven</code> <code>pypi</code> 等等，很多语言以及工具的包都可以搜索。</p></blockquote><p><a href="https://github.com/willfarrell/alfred-pkgman-workflow" target="_blank" rel="noopener">下载地址</a></p><h3 id="Search-Evernote-Chinese-Edition"><a href="#Search-Evernote-Chinese-Edition" class="headerlink" title="Search Evernote (Chinese Edition)"></a>Search Evernote (Chinese Edition)</h3><blockquote><p>搜索印象笔记</p></blockquote><p><a href="https://github.com/patricorgi/alfred-evernote" target="_blank" rel="noopener">下载地址</a></p><h3 id="timestamp-helper"><a href="#timestamp-helper" class="headerlink" title="timestamp-helper"></a>timestamp-helper</h3><blockquote><p>时间戳转换</p></blockquote><p><a href="http://www.packal.org/workflow/timestamp" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-timestamp.jpg?imageView2/2/w/500"><h3 id="有道翻译"><a href="#有道翻译" class="headerlink" title="有道翻译"></a>有道翻译</h3><blockquote><p>单词、句子翻译，支持发音</p></blockquote><p><a href="https://github.com/liszd/whyliam.workflows.youdao" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-youdao.jpg?imageView2/2/w/500"><h3 id="Open-with-MacVim"><a href="#Open-with-MacVim" class="headerlink" title="Open with MacVim"></a>Open with MacVim</h3><blockquote><p>使用 MacVim 打开文件</p></blockquote><p><a href="https://github.com/franzheidl/alfred-workflows/tree/master/open-with-macvim" target="_blank" rel="noopener">下载地址</a></p><img src="https://static.hufangyun.com/hexo/img/alfred-macvim.jpg?imageView2/2/w/500"><h3 id="AlfredHiddenFilesToggle"><a href="#AlfredHiddenFilesToggle" class="headerlink" title="AlfredHiddenFilesToggle"></a>AlfredHiddenFilesToggle</h3><blockquote><p>macOS 显示隐藏文件</p></blockquote><p><a href="https://github.com/logic1988/AlfredHiddenFilesToggle" target="_blank" rel="noopener">下载地址</a></p><h2 id="插件搜索"><a href="#插件搜索" class="headerlink" title="插件搜索"></a>插件搜索</h2><blockquote><p>可以在这三个地方寻找插件</p></blockquote><ul><li><p><a href="http://www.packal.org/" target="_blank" rel="noopener">packal</a></p></li><li><p><a href="http://www.alfredworkflow.com/" target="_blank" rel="noopener">alfredworkflow</a></p></li><li><p><a href="https://github.com" target="_blank" rel="noopener">Github</a></p></li></ul><p><strong>本文会时常更新，❤️ 的话，可以收藏一下。</strong></p><blockquote><p>欢迎来<a href="https://hufangyun.com">我的博客</a>评论交流，爬虫那么多，评论在其他地方我可能看不到 😂</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img alt=&quot;alfred&quot; src=&quot;https://static.hufangyun.com/hexo/img/alfred.png?imageView2/2/w/750&quot;&gt;&lt;span class=&quot;img-alt&quot;&gt;alfred&lt;/span&gt;
&lt;blockquote&gt;
      
    
    </summary>
    
      <category term="最热" scheme="https://hufangyun.com/categories/%E6%9C%80%E7%83%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>loading 等待不再无聊</title>
    <link href="https://hufangyun.com/2018/loading/"/>
    <id>https://hufangyun.com/2018/loading/</id>
    <published>2018-03-27T06:20:01.000Z</published>
    <updated>2018-03-27T06:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/Spinner-1s-200px.gif" alt="Spinner-1s-200px"><span class="img-alt">Spinner-1s-200px</span></p><blockquote><p>很多应用在加载的时候，因为数据还没有返回，会给用户呈现一个加载的动效作为反馈，提示用户数据正在加载。但是如果页面加载的时间太长，可能就会导致用户流失。</p><p>其实等待加载的这个小细节里，也有很多的创意，让等待不在无聊。</p></blockquote><p>为了让用户能稍等片刻，<code>loading</code> 的设计就可以充满趣味性，这里介绍一些比较有趣的 <code>loading</code>，让等待的过程变成了一种享受。</p><h2 id="使用充满趣味性的加载动效"><a href="#使用充满趣味性的加载动效" class="headerlink" title="使用充满趣味性的加载动效"></a>使用充满趣味性的加载动效</h2><p><img src="http://image.woshipm.com/wp-files/2017/02/a4WTx4yop7z4oCVUMIUl.gif" alt=""></p><p><img src="/media/pdECLTLpVFMr4Jc8xCWb.gif" alt="pdECLTLpVFMr4Jc8xCWb"><span class="img-alt">pdECLTLpVFMr4Jc8xCWb</span></p><p><img src="/media/161ZG138-44.gif" alt="161ZG138-44"><span class="img-alt">161ZG138-44</span></p><p><img src="/media/161ZJ0S-14.gif" alt="161ZJ0S-14"><span class="img-alt">161ZJ0S-14</span></p><p><img src="/media/815442-b0b53e2a86279228.gif" alt="815442-b0b53e2a86279228"><span class="img-alt">815442-b0b53e2a86279228</span></p><p><img src="/media/815442-6f23db9af75006ff.gif" alt="815442-6f23db9af75006ff"><span class="img-alt">815442-6f23db9af75006ff</span></p><p><img src="/media/giphy.gif" alt="giphy"><span class="img-alt">giphy</span></p><h3 id="品牌的-loading"><a href="#品牌的-loading" class="headerlink" title="品牌的 loading"></a>品牌的 loading</h3><blockquote><p>嵌入自家 logo，强化产品品牌</p></blockquote><h4 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h4><p><img src="/media/04-google-loading-motion-dots-logo.gif" alt="04-google-loading-motion-dots-logo"><span class="img-alt">04-google-loading-motion-dots-logo</span></p><h4 id="slack"><a href="#slack" class="headerlink" title="slack"></a>slack</h4><p><img src="/media/slack_load.gif" alt="slack_load"><span class="img-alt">slack_load</span></p><h4 id="digg"><a href="#digg" class="headerlink" title="digg"></a>digg</h4><p><img src="/media/815442-668ae4eaf45aab9b.gif" alt="815442-668ae4eaf45aab9b"><span class="img-alt">815442-668ae4eaf45aab9b</span></p><blockquote><p>上面的 <code>loading</code> 用户初次见到时候可能会感到比较新颖，但是多次遇到 <code>loading</code> 后，趣味性就递减了。</p></blockquote><p>我常用的一款 app 的 <code>loading</code> 就很有意思，每次的文案不一样，而且充满趣味性。</p><p>这样的 app 即使出现 <code>loading</code>，用户不会有等待感，反而想看清楚显示的是什么，对每次的文案充满期待。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let noticeString = [</span><br><span class="line">    &quot;正在拼命加载&quot;,</span><br><span class="line">    &quot;前方发现楼主&quot;,</span><br><span class="line">    &quot;年轻人,不要着急&quot;,</span><br><span class="line">    &quot;让我飞一会儿&quot;,</span><br><span class="line">    &quot;大爷,您又来了?&quot;,</span><br><span class="line">    &quot;楼主正在抓皮卡丘，等他一会儿吧&quot;,</span><br><span class="line">    &quot;爱我，就等我一万年&quot;,</span><br><span class="line">    &quot;未满18禁止入内&quot;,</span><br><span class="line">    &quot;正在前往 花村&quot;,</span><br><span class="line">    &quot;正在前往 阿努比斯神殿&quot;,</span><br><span class="line">    &quot;正在前往 沃斯卡娅工业区&quot;,</span><br><span class="line">    &quot;正在前往 观测站：直布罗陀&quot;,</span><br><span class="line">    &quot;正在前往 好莱坞&quot;,</span><br><span class="line">    &quot;正在前往 66号公路&quot;,</span><br><span class="line">    &quot;正在前往 国王大道&quot;,</span><br><span class="line">    &quot;正在前往 伊利奥斯&quot;,</span><br><span class="line">    &quot;正在前往 漓江塔&quot;,</span><br><span class="line">    &quot;正在前往 尼泊尔&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><blockquote><p>最后，附上几个 <code>loading</code> 生成工具。</p></blockquote><h3 id="loading-io"><a href="#loading-io" class="headerlink" title="loading.io"></a>loading.io</h3><p><a href="https://loading.io/" target="_blank" rel="noopener">https://loading.io/</a></p><p>登陆后，免费下载，支持 <code>loading</code> 动效的各种格式导出。</p><p><img src="/media/15221417078807.jpg" alt=""></p><h3 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h3><p><a href="https://connoratherton.com/loaders" target="_blank" rel="noopener">https://connoratherton.com/loaders</a></p><p>纯 <code>css</code> 实现的 <code>loading</code></p><p><img src="/media/15221417417648.jpg" alt=""></p><h3 id="spin-js"><a href="#spin-js" class="headerlink" title="spin.js"></a>spin.js</h3><p><a href="http://spin.js.org/" target="_blank" rel="noopener">http://spin.js.org/</a></p><p>在线编辑各种参数</p><p><img src="/media/15221418378683.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/media/Spinner-1s-200px.gif&quot; alt=&quot;Spinner-1s-200px&quot;&gt;&lt;span class=&quot;img-alt&quot;&gt;Spinner-1s-200px&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很多应用在加载的时
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>我的技术成长历程-2017</title>
    <link href="https://hufangyun.com/2018/tech-road-my-2017/"/>
    <id>https://hufangyun.com/2018/tech-road-my-2017/</id>
    <published>2018-02-04T04:20:45.000Z</published>
    <updated>2018-02-04T18:34:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><blockquote><p>2017年我离开校园，从实习到转正，算是正式参加工作了。我希望以后每年回顾的时候，都能感受到自己的技术成长。我也想练就一身的武艺，在IT的江湖里，仗剑天涯。</p></blockquote><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><p>2017年我学习了新语言 <code>elixir</code> (文末的扩展阅读有介绍的链接) 以及其对应的 web 框架 <code>phoenix</code> 。 <code>elixir</code> + <code>phoenix</code> 有点类似于 <code>ruby</code> on <code>rails</code> 。<code>phoenix</code> 配套的工具比较齐全，开发应用的体验很棒。上手后，感觉写 web 应用效率很高，能够快速的构建原型，验证自己的 ideas。这算是扩展自己服务端的技术栈，完善自己 web 领域的知识结构。</p><p>第二个，现在养成了，查看源码，溯本求源，刨根问底的习惯。<br>以前遇到问题时候，先 <code>Google</code> 是肯定的了，开发者必备的技能嘛。但是如果搜索的时候解决不了的问题，我也会去问答类的网站寻求帮助。但是2017年，我又 Get 了一个新的技能，查看源码。我发现很多的问题，尤其是很多前端库导致的问题，看一遍源码，不但问题解决了，而且对该库的实现也会有个大概的了解。有时候有些小伙伴也会向我请教问题，初看的话，我也不知道怎么解决。但是当我去翻看源码的时候，很多问题就迎刃而解了。这也是编程初学者快速提高实力的一个方法。</p><p>第三个，<code>markdown</code> 的书写格式。<br>自从看了 <code>markdown</code> 的一些书写规范后，我在用 <code>markdown</code> 写文档的时候格式注意多了。我觉的以后我要把这种好的习惯延续到我的代码规范里，保持一点代码洁癖。</p><p>第四个，文章的推广。<br>之前我一直在 <a href="https://segmentfault.com/u/youthink" target="_blank" rel="noopener">segmentfault</a> 上写技术博文(因为他们家的 markdown 编辑器很好用)，后来有一次我把自己的 <a href="https://hufangyun.com/2017/short-url/">短网址(short URL)系统的原理及其实现</a> 这篇分享到了掘金，一周之内我博客的流量暴增，超乎我的想象力，让我发现了新世界。文章收到好的反馈，对我来说是很积极的鼓励，让我再接再厉。</p><h3 id="晋升"><a href="#晋升" class="headerlink" title="晋升"></a>晋升</h3><p>年底一件很高兴的事情就是，老大帮我提名晋升，结果也很棒，晋升成功。职称晋升算是对我的技术成长最好的反馈。再接再厉，做好技术沉淀，挑战下一个技术等级。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="https://hufangyun.com/2017/elixir-introduction/">elixir介绍：未来的编程语言</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2017&quot;&gt;&lt;a href=&quot;#2017&quot; class=&quot;headerlink&quot; title=&quot;2017&quot;&gt;&lt;/a&gt;2017&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2017年我离开校园，从实习到转正，算是正式参加工作了。我希望以后每年回顾的时候，都能感受到自己的
      
    
    </summary>
    
      <category term="技术成长" scheme="https://hufangyun.com/categories/%E6%8A%80%E6%9C%AF%E6%88%90%E9%95%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>怎样做复盘？</title>
    <link href="https://hufangyun.com/2018/replay/"/>
    <id>https://hufangyun.com/2018/replay/</id>
    <published>2018-01-03T16:00:00.000Z</published>
    <updated>2018-01-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>“bug 写了这么多”，少不了复盘。记录一下方法论。</p><blockquote><p>一件事情做完后无论成功与否，坐下来把当时预先的想法、中间出现的问题、为什么没达成或者为什么达成目标等因素整理一遍，在下次做同样的事时，自然就能吸取上次的经验教训。这就是复盘。——柳传志</p></blockquote><h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><ol><li><p>哪些地方做得比较好？分析原因，下次坚持好的原则；</p></li><li><p>哪些地方不好？分析原因，以后怎么彻底避免类似问题？</p></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>反思与总结的四步骤</p><ul><li>回顾目标，时刻牢记最初目的，并一遍一遍地回顾和澄清；</li><li>对照最初的目标，回顾过程，评估结果；</li><li>刨根问底，分析原因；</li><li>总结规律并反思，制订下一步行动计划，包括需要实施哪些新举措，继续留用哪些举措，取消哪些举措等。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“bug 写了这么多”，少不了复盘。记录一下方法论。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一件事情做完后无论成功与否，坐下来把当时预先的想法、中间出现的问题、为什么没达成或者为什么达成目标等因素整理一遍，在下次做同样的事时，自然就能吸取上次的经验教训。这就是复盘。——柳
      
    
    </summary>
    
      <category term="读书" scheme="https://hufangyun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 edeliver 部署 Elixir 应用程序</title>
    <link href="https://hufangyun.com/2017/elixir-edeliver/"/>
    <id>https://hufangyun.com/2017/elixir-edeliver/</id>
    <published>2017-12-10T16:00:00.000Z</published>
    <updated>2018-02-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/1786864843-5a2b22b4e6cd1_articlex.png" alt="1786864843-5a2b22b4e6cd1_articlex"><span class="img-alt">1786864843-5a2b22b4e6cd1_articlex</span></p><blockquote><p>最近使用 <code>Elixir</code> 的 web 框架 <code>Phoenix</code> 开发了一个简单的应用，部署的时候踩了不少坑。做一下笔记。</p></blockquote><h2 id="引入-edeliver-依赖"><a href="#引入-edeliver-依赖" class="headerlink" title="引入 edeliver 依赖"></a>引入 edeliver 依赖</h2><p>修改 <code>mix.exs</code> 文件，引入 <a href="https://github.com/edeliver/edeliver" target="_blank" rel="noopener">edeliver</a> 依赖</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span></span>, <span class="symbol">do:</span> [</span><br><span class="line">  <span class="symbol">applications:</span> [</span><br><span class="line">    <span class="symbol">:edeliver</span></span><br><span class="line">  ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">deps</span></span> <span class="keyword">do</span></span><br><span class="line">  [</span><br><span class="line">    ...</span><br><span class="line">    &#123;<span class="symbol">:edeliver</span>, <span class="string">"~&gt; 1.4.4"</span>&#125;,</span><br><span class="line">    &#123;<span class="symbol">:exrm</span>, <span class="string">"&gt;= 0.16.0"</span>, <span class="symbol">warn_missing:</span> <span class="keyword">false</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里有两种组合 <code>edeliver</code> + <code>distillery</code> 或者 <code>edeliver</code> + <code>exrm</code>，我选用了后者。因为配置更简单一点。🐒</p><h2 id="edeliver-配置"><a href="#edeliver-配置" class="headerlink" title="edeliver 配置"></a>edeliver 配置</h2><p>在项目文件夹，创建 <code>.deliver/config</code> 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">APP=<span class="string">"your-erlang-app"</span> <span class="comment"># 应用名称</span></span><br><span class="line"></span><br><span class="line">BUILD_HOST=<span class="string">"build-system.acme.org"</span> <span class="comment"># 构建的主机地址</span></span><br><span class="line">BUILD_USER=<span class="string">"build"</span> <span class="comment"># 构建主机的登录用户名</span></span><br><span class="line"></span><br><span class="line">BUILD_AT=<span class="string">"/tmp/erlang/my-app/builds"</span> <span class="comment"># 构建主机上的构建文件夹</span></span><br><span class="line"></span><br><span class="line">STAGING_HOSTS=<span class="string">"test1.acme.org test2.acme.org"</span> <span class="comment"># 测试主机地址</span></span><br><span class="line">STAGING_USER=<span class="string">"test"</span> <span class="comment"># 测试主机的登录用户名</span></span><br><span class="line">TEST_AT=<span class="string">"/test/my-erlang-app"</span> <span class="comment"># 测试的构建文件夹</span></span><br><span class="line"></span><br><span class="line">PRODUCTION_HOSTS=<span class="string">"deploy1.acme.org deploy2.acme.org"</span> <span class="comment"># 部署主机地址</span></span><br><span class="line">PRODUCTION_USER=<span class="string">"production"</span> <span class="comment"># 部署主机的登录用户名</span></span><br><span class="line">DELIVER_TO=<span class="string">"/opt/my-erlang-app"</span> <span class="comment"># 部署的文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/prod.secret.exs 文件保存了很多的敏感信息，这个文件不能放在项目里。</span></span><br><span class="line"><span class="comment"># 我们把它放在服务器上，部署的时候自动连接过去。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">pre_erlang_get_and_update_deps</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> _prod_secret_path=<span class="string">"/home/builder/prod.secret.exs"</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$TARGET_MIX_ENV</span>"</span> = <span class="string">"prod"</span> ]; <span class="keyword">then</span></span><br><span class="line">    __sync_remote <span class="string">"</span></span><br><span class="line"><span class="string">      ln -sfn '<span class="variable">$_prod_secret_path</span>' '<span class="variable">$BUILD_AT</span>/config/prod.secret.exs'</span></span><br><span class="line"><span class="string">    "</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子 🌰 我某次的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">APP=<span class="string">"short_url"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动以 git revision 作为发布名称</span></span><br><span class="line">AUTO_VERSION=<span class="string">"revision"</span></span><br><span class="line"></span><br><span class="line">BUILD_HOST=<span class="string">"url"</span></span><br><span class="line">BUILD_USER=<span class="string">"web"</span></span><br><span class="line">BUILD_AT=<span class="string">"/tmp/edeliver/short_url/builds"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我只有正式环境，所以没有配置 STAGING 环境</span></span><br><span class="line">PRODUCTION_HOSTS=<span class="string">"url"</span></span><br><span class="line">PRODUCTION_USER=<span class="string">"web"</span></span><br><span class="line"></span><br><span class="line">DELIVER_TO=<span class="string">"/home/web/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换用了国内的源，加快依赖安装速度</span></span><br><span class="line">HEX_MIRROR_URL=<span class="string">"https://hexpm.upyun.com"</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">pre_erlang_get_and_update_deps</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> _prod_secret_path=<span class="string">"/home/builder/short_url.prod.secret.exs"</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$TARGET_MIX_ENV</span>"</span> = <span class="string">"prod"</span> ]; <span class="keyword">then</span></span><br><span class="line">    __sync_remote <span class="string">"</span></span><br><span class="line"><span class="string">      ln -sfn '<span class="variable">$_prod_secret_path</span>' '<span class="variable">$BUILD_AT</span>/config/prod.secret.exs'</span></span><br><span class="line"><span class="string">    "</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好后，执行以下命令。每次构建的压缩包，不记录到 <code>git</code> 记录里</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">echo <span class="string">".deliver/releases/"</span> <span class="meta">&gt;&gt; </span>.gitignore</span><br></pre></td></tr></table></figure><p><code>config/prod.exs</code> 部署配置默认有这样一句话，从系统里加载环境变量。如果你没有在部署的主机上添加变量，这句话就删除掉。别问我怎么知道的。😭</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">﻿<span class="attr">load_from_system_env:</span> <span class="literal">true</span><span class="string">,</span></span><br></pre></td></tr></table></figure><p>提交刚才配置文件的修改，并且下载依赖编译</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span> -A &amp;&amp; git commit -m <span class="string">"Setting up edeliver"</span></span><br><span class="line">mix <span class="keyword">do</span> deps.<span class="keyword">get</span>, compile</span><br></pre></td></tr></table></figure><p>其他的配置可以参考 <a href="https://github.com/edeliver/edeliver" target="_blank" rel="noopener">项目文档</a></p><p>我们的配置文件里配置的线上环境的隐私信息从 <code>/home/builder/short_url.prod.secret.exs</code> 目录获取，所以运行下面的命令。上传我们的线上配置文件。该文件是不会记录到 <code>git</code> 版本里的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp ~/你的项目/config/prod.secret.exs 主机名:/home/builder/short_url.prod.secret.exs</span><br></pre></td></tr></table></figure><h2 id="数据库设置配置"><a href="#数据库设置配置" class="headerlink" title="数据库设置配置"></a>数据库设置配置</h2><p><code>phoenix</code> 默认使用的 <code>postgreSQL</code> 数据库</p><p>切换到默认用户 <code>postgres</code></p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo su - postgres</span></span><br></pre></td></tr></table></figure><p>进入数据库</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">psql</span></span><br></pre></td></tr></table></figure><p>创建用户并赋予权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> www <span class="keyword">WITH</span> <span class="keyword">PASSWORD</span> <span class="string">'u867#eDgg6#2@elo098OIUh'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> short_url_prod OWNER www;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">role</span> www login createdb;</span><br></pre></td></tr></table></figure><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>现在使用以下命令创建线上数据库的数据表</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mix</span> edeliver migrate production</span><br></pre></td></tr></table></figure><h2 id="edeliver-命令"><a href="#edeliver-命令" class="headerlink" title="edeliver 命令"></a>edeliver 命令</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mix</span> edeliver update production --start-deploy <span class="meta"># 发布应用并启动</span></span><br><span class="line"></span><br><span class="line">--branch=dev 指定使用 dev 分支 默认使用的 master</span><br><span class="line"></span><br><span class="line"><span class="built_in">mix</span> edeliver ping production <span class="meta"># 查看应用是否正在运行</span></span><br><span class="line"><span class="built_in">mix</span> edeliver upgrade  <span class="meta"># 升级应用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mix</span> edeliver version production <span class="meta"># 查看应用的版本</span></span><br><span class="line"><span class="built_in">mix</span> edeliver migrate production <span class="meta"># 运行数据库构建 执行该命令前要先部署应用</span></span><br><span class="line"><span class="built_in">mix</span> edeliver restart production <span class="meta"># 或者 start 或者 stop</span></span><br></pre></td></tr></table></figure><h3 id="migrate-数据库迁移命令"><a href="#migrate-数据库迁移命令" class="headerlink" title="migrate 数据库迁移命令"></a>migrate 数据库迁移命令</h3><p>🔔 <strong>注意</strong>  执行以下的命令之前，要先部署应用。</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mix</span> edeliver migrate production  <span class="meta"># 运行数据库构建</span></span><br><span class="line"><span class="built_in">mix</span> edeliver migrate production up <span class="meta"># 同上面的命令</span></span><br><span class="line"><span class="built_in">mix</span> edeliver migrate production down <span class="meta"># 逆向执行数据库构建 会删除所有的数据表和数据</span></span><br><span class="line"><span class="built_in">mix</span> edeliver show migrations production <span class="meta"># 执行上面的 down 命令后会显示状态</span></span><br></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>如果不幸，发布出现问题。可以在一下目录查看日志</p><p>配置文件里的 <code>DELIVER_TO=&quot;/home/web/&quot;</code> 就是我们项目的部署目录，对应的日志文件也在这里。比如我的：<code>/home/web/short_url/log</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f erlang.log.1</span><br></pre></td></tr></table></figure><h2 id="查看端口使用"><a href="#查看端口使用" class="headerlink" title="查看端口使用"></a>查看端口使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -tlunp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/media/1786864843-5a2b22b4e6cd1_articlex.png&quot; alt=&quot;1786864843-5a2b22b4e6cd1_articlex&quot;&gt;&lt;span class=&quot;img-alt&quot;&gt;1786864843-5a2b22b4
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>linux 服务器初始化配置流程</title>
    <link href="https://hufangyun.com/2017/linux-init/"/>
    <id>https://hufangyun.com/2017/linux-init/</id>
    <published>2017-12-08T16:00:00.000Z</published>
    <updated>2017-12-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/819542712-5a291b0bb9615_articlex.jpeg" alt="819542712-5a291b0bb9615_articlex"><span class="img-alt">819542712-5a291b0bb9615_articlex</span></p><blockquote><p>开发 <code>web</code> 应用的时候，经常需要配置服务器。我在阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2014/03/server_setup.html" target="_blank" rel="noopener">Linux服务器的初步配置流程</a> 的基础上，整理了这篇笔记。节约以后配置服务器的时间。 </p></blockquote><h2 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h2><p><code>root</code> 账户默认没有密码 安全起见 先初始化一个</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h2 id="创建-Linux-管理员账户"><a href="#创建-Linux-管理员账户" class="headerlink" title="创建 Linux 管理员账户"></a>创建 Linux 管理员账户</h2><blockquote><p>🐧 使用 <code>Linux</code> 服务器的时候，尽量不要使用 <code>root</code> 账号，处理日常操作，我们新建一个管理员账号。</p></blockquote><p>首先，添加一个用户组（这里我自定义的 admin）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addgroup admin</span><br></pre></td></tr></table></figure><p>然后，添加一个新用户（假定为 www）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -d /home/www -s /bin/bash -m www</span><br></pre></td></tr></table></figure><p>上面命令中，参数 <code>d</code> 指定用户的主目录，参数 <code>s</code> 指定用户的 <code>shell</code>，参数 <code>m</code> 表示如果该目录不存在，则创建该目录。</p><p>接着，设置新用户的密码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd www</span><br></pre></td></tr></table></figure><p>将新用户（www）添加到用户组（admin）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -a -G admin www</span><br></pre></td></tr></table></figure><p>接着，为新用户设定sudo权限。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure><p>找到下面这一行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>在这一行的下面，再添加一行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root    ALL=(ALL:ALL) ALL</span><br><span class="line">www    ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>上面的 <code>NOPASSWD</code> 表示，切换 sudo 的时候，不需要输入密码。如果出于安全考虑，也可以强制要求输入密码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root    ALL=(ALL:ALL) ALL</span><br><span class="line">www    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>最后，先退出 <code>root</code> 用户登录，再用新用户的身份登录。</p><h2 id="配置-SSH-服务"><a href="#配置-SSH-服务" class="headerlink" title="配置 SSH 服务"></a>配置 SSH 服务</h2><p>把自己电脑的 <code>ssh</code> 公钥，保存到服务器的 <code>~/.ssh/authorized_keys</code> 文件中</p><p>直接使用下面的命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@123.456.78</span><br></pre></td></tr></table></figure><p>然后，进入服务器，编辑SSH配置文件/etc/ssh/sshd_config。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/ssh/sshd_config ~     (备份，复原时使用)</span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>在配置文件中，将 SSH 的默认端口 22 改掉。假设使用 25000</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Port 25000</span><br></pre></td></tr></table></figure><p>然后，检查几个设置是否设成下面这样，确保去除前面的#号。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>Protocol 2</td><td>ssh 协议使用新版的</td></tr><tr><td>PermitRootLogin no</td><td>不允许 root 登录</td></tr><tr><td>PermitEmptyPasswords no</td><td>不允许空密码登录</td></tr><tr><td>PasswordAuthentication no</td><td>使用密码授权登录</td></tr><tr><td>RSAAuthentication yes</td><td>使用RSA算法进行安全验证</td></tr><tr><td>PubkeyAuthentication yes</td><td>允许公钥认证</td></tr><tr><td>UseDNS no</td><td>禁用DNS反向解析 会加快速度</td></tr><tr><td>SyslogFacility AUTHPRIV</td><td>记录用户登录信息</td></tr></tbody></table><p>上面主要是禁止 <code>root</code> 用户登录，以及禁止用密码方式登录。</p><p>保存后，退出文件编辑。</p><p>接着，改变authorized_keys文件的权限。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod 600 ~/.ssh/authorized_keys &amp;&amp; chmod 700 ~/.ssh/</span><br></pre></td></tr></table></figure><p>重启 SSHD</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><h2 id="运行环境配置"><a href="#运行环境配置" class="headerlink" title="运行环境配置"></a>运行环境配置</h2><p>检查服务器的区域设置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locale</span><br></pre></td></tr></table></figure><p>如果结果不是 <code>en_US.UTF-8</code>，建议都设成它。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo locale-gen en_US en_US.UTF-8 en_CA.UTF-8</span><br><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>然后，更新软件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>最后，再根据需要，做一些安全设置，比如搭建防火墙，关闭 <code>HTTP</code>、<code>HTTPs</code>、<code>SSH</code> 以外的端口，详细可参考这篇 <a href="http://spenserj.com/blog/2013/07/15/securing-a-linux-server/" target="_blank" rel="noopener">《Securing a Linux Server》</a>。</p><h2 id="特别番"><a href="#特别番" class="headerlink" title="特别番"></a>特别番</h2><h3 id="阿里云服务器"><a href="#阿里云服务器" class="headerlink" title="阿里云服务器"></a>阿里云服务器</h3><p>阿里云服务器可以在控制台设置安全组规则。</p><h4 id="什么是安全组"><a href="#什么是安全组" class="headerlink" title="什么是安全组"></a>什么是安全组</h4><p>简单点，给大家举个栗子🌰，我部署了一个 <code>MongoDB</code> 的数据库，我怕别人黑我数据库，我就可以在安全组的规则里设置 <code>公网入方向</code> 拒绝访问 <code>MongoDB</code> 使用的端口 <code>27017</code>。只允许本地 <code>locahost</code> 访问，禁止公网访问。</p><p>下面是教科书版具体解释</p><p>阿里云产品介绍 请看这里 <a href="https://www.alibabacloud.com/help/zh/doc-detail/25387.htm" target="_blank" rel="noopener">安全组</a></p><blockquote><p>安全组是一种虚拟防火墙，具备状态检测包过滤功能。安全组用于设置单台或多台云服务器的网络访问控制，它是重要的网络安全隔离手段，用于在云端划分安全域。</p></blockquote><blockquote><p>安全组是一个逻辑上的分组，这个分组是由同一个地域（Region）内具有相同安全保护需求并相互信任的实例组成。每个实例至少属于一个安全组，在创建的时候就需要指定。同一安全组内的实例之间网络互通，不同安全组的实例之间默认内网不通。可以授权两个安全组之间互访。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/2014/03/server_setup.html" target="_blank" rel="noopener">Linux服务器的初步配置流程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/media/819542712-5a291b0bb9615_articlex.jpeg&quot; alt=&quot;819542712-5a291b0bb9615_articlex&quot;&gt;&lt;span class=&quot;img-alt&quot;&gt;819542712-5a291b0bb9
      
    
    </summary>
    
      <category term="编程" scheme="https://hufangyun.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
</feed>
